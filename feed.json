{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sakura",
    "subtitle": "我以为18岁之后是19岁，19岁之后是18岁，20岁永远都不会到来 。",
    "icon": "https://zengshengli775.gitee.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://zengshengli775.gitee.io",
    "items": [
        {
            "id": "https://zengshengli775.gitee.io/2021/08/29/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/%E8%BF%81%E7%A7%BB%E7%BD%91%E6%98%93%E4%BA%91:QQ%E9%9F%B3%E4%B9%90/",
            "url": "https://zengshengli775.gitee.io/2021/08/29/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/%E8%BF%81%E7%A7%BB%E7%BD%91%E6%98%93%E4%BA%91:QQ%E9%9F%B3%E4%B9%90/",
            "title": "迁移网易云/QQ音乐",
            "date_published": "2021-08-28T16:00:00.000Z",
            "content_html": "<h2 id=\"迁移网易云qq音乐\"><a class=\"anchor\" href=\"#迁移网易云qq音乐\">#</a> 迁移网易云 / QQ 音乐</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly95eXJjZC5jb20vbjJzLw==\">迁移 网易云 / QQ 音乐到 Apple Music, Youtube Music, Spotify</span></p>\n",
            "tags": [
                "实用技巧",
                "Music"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/27/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "url": "https://zengshengli775.gitee.io/2021/08/27/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "title": "C++基础知识",
            "date_published": "2021-08-26T16:00:00.000Z",
            "content_html": "<h2 id=\"1-c初识\"><a class=\"anchor\" href=\"#1-c初识\">#</a> 1 C++ 初识</h2>\n<h3 id=\"11-注释\"><a class=\"anchor\" href=\"#11-注释\">#</a> 1.1 注释</h3>\n<p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>\n<p><strong>两种格式</strong></p>\n<ol>\n<li><strong>单行注释</strong>： <code>// 描述信息</code>\n<ul>\n<li>通常放在一行代码的上方，或者一条语句的末尾，<mark>对该行代码说明</mark></li>\n</ul>\n</li>\n<li><strong>多行注释</strong>：  <code>/* 描述信息 */</code>\n<ul>\n<li>通常放在一段代码的上方，<mark>对该段代码做整体说明</mark></li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>提示：编译器在编译代码时，会忽略注释的内容</p>\n</blockquote>\n<h3 id=\"12-变量\"><a class=\"anchor\" href=\"#12-变量\">#</a> 1.2 变量</h3>\n<p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>\n<p><strong>语法</strong>： <code>数据类型 变量名 = 初始值;</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"3\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 变量的定义</span></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 语法：数据类型  变量名 = 初始值</span></pre></td></tr><tr class=\"marked\"><td data-num=\"8\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"10\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"12\"></td><td><pre>\t</pre></td></tr><tr class=\"marked\"><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"14\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注意：C++ 在创建变量时，必须给变量一个初始值，否则会报错</p>\n</blockquote>\n<h3 id=\"13-常量\"><a class=\"anchor\" href=\"#13-常量\">#</a> 1.3  常量</h3>\n<p><strong>作用</strong>：用于记录程序中不可更改的数据</p>\n<p>C++ 定义常量两种方式</p>\n<ol>\n<li>\n<p><strong>#define</strong> 宏常量：  <code>#define 常量名 常量值</code></p>\n<ul>\n<li><mark>通常在文件上方定义</mark>，表示一个常量</li>\n</ul>\n</li>\n<li>\n<p><strong>const</strong> 修饰的变量  <code>const 数据类型 常量名 = 常量值</code></p>\n<ul>\n<li><mark>通常在变量定义前加关键字 const</mark>，修饰该变量为常量，不可修改</li>\n</ul>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1、宏常量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">day</span> <span class=\"token expression\"><span class=\"token number\">7</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"一周里总共有 \"</span> <span class=\"token operator\">&lt;&lt;</span> day <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 天\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//day = 8;  // 报错，宏常量不可以修改</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//2、const 修饰变量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"一年里总共有 \"</span> <span class=\"token operator\">&lt;&lt;</span> month <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 个月份\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//month = 24; // 报错，常量是不可以修改的</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"14-关键字\"><a class=\"anchor\" href=\"#14-关键字\">#</a> 1.4 关键字</h3>\n<p>** 作用：** 关键字是 C++ 中预先保留的单词（标识符）</p>\n<ul>\n<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>\n</ul>\n<p>C++ 关键字如下：</p>\n<table>\n<thead>\n<tr>\n<th>asm</th>\n<th>do</th>\n<th>if</th>\n<th>return</th>\n<th>typedef</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>auto</td>\n<td>double</td>\n<td>inline</td>\n<td>short</td>\n<td>typeid</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>dynamic_cast</td>\n<td>int</td>\n<td>signed</td>\n<td>typename</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>long</td>\n<td>sizeof</td>\n<td>union</td>\n</tr>\n<tr>\n<td>case</td>\n<td>enum</td>\n<td>mutable</td>\n<td>static</td>\n<td>unsigned</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>explicit</td>\n<td>namespace</td>\n<td>static_cast</td>\n<td>using</td>\n</tr>\n<tr>\n<td>char</td>\n<td>export</td>\n<td>new</td>\n<td>struct</td>\n<td>virtual</td>\n</tr>\n<tr>\n<td>class</td>\n<td>extern</td>\n<td>operator</td>\n<td>switch</td>\n<td>void</td>\n</tr>\n<tr>\n<td>const</td>\n<td>false</td>\n<td>private</td>\n<td>template</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>const_cast</td>\n<td>float</td>\n<td>protected</td>\n<td>this</td>\n<td>wchar_t</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>for</td>\n<td>public</td>\n<td>throw</td>\n<td>while</td>\n</tr>\n<tr>\n<td>default</td>\n<td>friend</td>\n<td>register</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>delete</td>\n<td>goto</td>\n<td>reinterpret_cast</td>\n<td>try</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>\n<h3 id=\"15-标识符命名规则\"><a class=\"anchor\" href=\"#15-标识符命名规则\">#</a> 1.5 标识符命名规则</h3>\n<p><strong>作用</strong>：C++ 规定给标识符（变量、常量）命名时，有一套自己的规则</p>\n<ul>\n<li>标识符不能是关键字</li>\n<li>标识符只能由字母、数字、下划线组成</li>\n<li>第一个字符必须为字母或下划线</li>\n<li>标识符中字母区分大小写</li>\n</ul>\n<blockquote>\n<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>\n</blockquote>\n<h2 id=\"2-数据类型\"><a class=\"anchor\" href=\"#2-数据类型\">#</a> 2 数据类型</h2>\n<p>C++ 规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>\n<h3 id=\"21-整型\"><a class=\"anchor\" href=\"#21-整型\">#</a> 2.1 整型</h3>\n<p><strong>作用</strong>：整型变量表示的是<mark>整数类型</mark>的数据</p>\n<p>C++ 中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>short (短整型)</td>\n<td>2 字节</td>\n<td>(-2^15 ~ 2^15-1)</td>\n</tr>\n<tr>\n<td>int (整型)</td>\n<td>4 字节</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long (长整形)</td>\n<td>Windows 为 4 字节，Linux 为 4 字节 (32 位)，8 字节 (64 位)</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long long (长长整形)</td>\n<td>8 字节</td>\n<td>(-2^63 ~ 2^63-1)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"22-sizeof关键字\"><a class=\"anchor\" href=\"#22-sizeof关键字\">#</a> 2.2 sizeof 关键字</h3>\n<p>** 作用：** 利用 sizeof 关键字可以<mark>统计数据类型所占内存大小</mark></p>\n<p><strong>语法：</strong>  <code>sizeof( 数据类型 / 变量)</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tcout &lt;&lt; &quot;short 类型所占内存空间为： &quot; &lt;&lt; sizeof(short) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;int 类型所占内存空间为： &quot; &lt;&lt; sizeof(int) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long) &lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;long long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long long) &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<blockquote>\n<p><strong>整型结论</strong>：<mark>short &lt; int &lt;= long &lt;= long long</mark></p>\n</blockquote>\n<h3 id=\"23-实型浮点型\"><a class=\"anchor\" href=\"#23-实型浮点型\">#</a> 2.3 实型（浮点型）</h3>\n<p><strong>作用</strong>：用于<mark>表示小数</mark></p>\n<p>浮点型变量分为两种：</p>\n<ol>\n<li>单精度 float</li>\n<li>双精度 double</li>\n</ol>\n<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th><strong>有效数字范围</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>float</td>\n<td>4 字节</td>\n<td>7 位有效数字</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8 字节</td>\n<td>15～16 位有效数字</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tfloat f1 = 3.14f;\n\tdouble d1 = 3.14;\n\n\tcout &lt;&lt; f1 &lt;&lt; endl;\n\tcout &lt;&lt; d1&lt;&lt; endl;\n\n\tcout &lt;&lt; &quot;float  sizeof = &quot; &lt;&lt; sizeof(f1) &lt;&lt; endl;\n\tcout &lt;&lt; &quot;double sizeof = &quot; &lt;&lt; sizeof(d1) &lt;&lt; endl;\n\n\t//科学计数法\n\tfloat f2 = 3e2; // 3 * 10 ^ 2 \n\tcout &lt;&lt; &quot;f2 = &quot; &lt;&lt; f2 &lt;&lt; endl;\n\n\tfloat f3 = 3e-2;  // 3 * 0.1 ^ 2\n\tcout &lt;&lt; &quot;f3 = &quot; &lt;&lt; f3 &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"24-字符型\"><a class=\"anchor\" href=\"#24-字符型\">#</a> 2.4 字符型</h3>\n<p>** 作用：** 字符型变量用于显示单个字符</p>\n<p><strong>语法：</strong> <code>char ch = 'a';</code></p>\n<blockquote>\n<p>注意 1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>\n</blockquote>\n<blockquote>\n<p>注意 2：单引号内只能有一个字符，不可以是字符串</p>\n</blockquote>\n<ul>\n<li>C 和 C++ 中字符型变量只占用<mark> 1 个字节</mark>。</li>\n<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的 ASCII 编码放入到存储单元</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t\n\tchar ch = 'a';\n\tcout &lt;&lt; ch &lt;&lt; endl;\n\tcout &lt;&lt; sizeof(char) &lt;&lt; endl;\n\n\t//ch = &quot;abcde&quot;; //错误，不可以用双引号\n\t//ch = 'abcde'; //错误，单引号内只能引用一个字符\n\n\tcout &lt;&lt; (int)ch &lt;&lt; endl;  //查看字符a对应的ASCII码\n\tch = 97; //可以直接用ASCII给字符型变量赋值\n\tcout &lt;&lt; ch &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<p>ASCII 码表格：</p>\n<table>\n<thead>\n<tr>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>控制字符</strong></th>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>字符</strong></th>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>字符</strong></th>\n<th><strong>ASCII</strong> 值</th>\n<th><strong>字符</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>NUT</td>\n<td>32</td>\n<td>(space)</td>\n<td>64</td>\n<td>@</td>\n<td>96</td>\n<td>、</td>\n</tr>\n<tr>\n<td>1</td>\n<td>SOH</td>\n<td>33</td>\n<td>!</td>\n<td>65</td>\n<td>A</td>\n<td>97</td>\n<td>a</td>\n</tr>\n<tr>\n<td>2</td>\n<td>STX</td>\n<td>34</td>\n<td>&quot;</td>\n<td>66</td>\n<td>B</td>\n<td>98</td>\n<td>b</td>\n</tr>\n<tr>\n<td>3</td>\n<td>ETX</td>\n<td>35</td>\n<td>#</td>\n<td>67</td>\n<td>C</td>\n<td>99</td>\n<td>c</td>\n</tr>\n<tr>\n<td>4</td>\n<td>EOT</td>\n<td>36</td>\n<td>$</td>\n<td>68</td>\n<td>D</td>\n<td>100</td>\n<td>d</td>\n</tr>\n<tr>\n<td>5</td>\n<td>ENQ</td>\n<td>37</td>\n<td>%</td>\n<td>69</td>\n<td>E</td>\n<td>101</td>\n<td>e</td>\n</tr>\n<tr>\n<td>6</td>\n<td>ACK</td>\n<td>38</td>\n<td>&amp;</td>\n<td>70</td>\n<td>F</td>\n<td>102</td>\n<td>f</td>\n</tr>\n<tr>\n<td>7</td>\n<td>BEL</td>\n<td>39</td>\n<td>,</td>\n<td>71</td>\n<td>G</td>\n<td>103</td>\n<td>g</td>\n</tr>\n<tr>\n<td>8</td>\n<td>BS</td>\n<td>40</td>\n<td>(</td>\n<td>72</td>\n<td>H</td>\n<td>104</td>\n<td>h</td>\n</tr>\n<tr>\n<td>9</td>\n<td>HT</td>\n<td>41</td>\n<td>)</td>\n<td>73</td>\n<td>I</td>\n<td>105</td>\n<td>i</td>\n</tr>\n<tr>\n<td>10</td>\n<td>LF</td>\n<td>42</td>\n<td>*</td>\n<td>74</td>\n<td>J</td>\n<td>106</td>\n<td>j</td>\n</tr>\n<tr>\n<td>11</td>\n<td>VT</td>\n<td>43</td>\n<td>+</td>\n<td>75</td>\n<td>K</td>\n<td>107</td>\n<td>k</td>\n</tr>\n<tr>\n<td>12</td>\n<td>FF</td>\n<td>44</td>\n<td>,</td>\n<td>76</td>\n<td>L</td>\n<td>108</td>\n<td>l</td>\n</tr>\n<tr>\n<td>13</td>\n<td>CR</td>\n<td>45</td>\n<td>-</td>\n<td>77</td>\n<td>M</td>\n<td>109</td>\n<td>m</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SO</td>\n<td>46</td>\n<td>.</td>\n<td>78</td>\n<td>N</td>\n<td>110</td>\n<td>n</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SI</td>\n<td>47</td>\n<td>/</td>\n<td>79</td>\n<td>O</td>\n<td>111</td>\n<td>o</td>\n</tr>\n<tr>\n<td>16</td>\n<td>DLE</td>\n<td>48</td>\n<td>0</td>\n<td>80</td>\n<td>P</td>\n<td>112</td>\n<td>p</td>\n</tr>\n<tr>\n<td>17</td>\n<td>DCI</td>\n<td>49</td>\n<td>1</td>\n<td>81</td>\n<td>Q</td>\n<td>113</td>\n<td>q</td>\n</tr>\n<tr>\n<td>18</td>\n<td>DC2</td>\n<td>50</td>\n<td>2</td>\n<td>82</td>\n<td>R</td>\n<td>114</td>\n<td>r</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DC3</td>\n<td>51</td>\n<td>3</td>\n<td>83</td>\n<td>S</td>\n<td>115</td>\n<td>s</td>\n</tr>\n<tr>\n<td>20</td>\n<td>DC4</td>\n<td>52</td>\n<td>4</td>\n<td>84</td>\n<td>T</td>\n<td>116</td>\n<td>t</td>\n</tr>\n<tr>\n<td>21</td>\n<td>NAK</td>\n<td>53</td>\n<td>5</td>\n<td>85</td>\n<td>U</td>\n<td>117</td>\n<td>u</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SYN</td>\n<td>54</td>\n<td>6</td>\n<td>86</td>\n<td>V</td>\n<td>118</td>\n<td>v</td>\n</tr>\n<tr>\n<td>23</td>\n<td>TB</td>\n<td>55</td>\n<td>7</td>\n<td>87</td>\n<td>W</td>\n<td>119</td>\n<td>w</td>\n</tr>\n<tr>\n<td>24</td>\n<td>CAN</td>\n<td>56</td>\n<td>8</td>\n<td>88</td>\n<td>X</td>\n<td>120</td>\n<td>x</td>\n</tr>\n<tr>\n<td>25</td>\n<td>EM</td>\n<td>57</td>\n<td>9</td>\n<td>89</td>\n<td>Y</td>\n<td>121</td>\n<td>y</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SUB</td>\n<td>58</td>\n<td>:</td>\n<td>90</td>\n<td>Z</td>\n<td>122</td>\n<td>z</td>\n</tr>\n<tr>\n<td>27</td>\n<td>ESC</td>\n<td>59</td>\n<td>;</td>\n<td>91</td>\n<td>[</td>\n<td>123</td>\n<td>{</td>\n</tr>\n<tr>\n<td>28</td>\n<td>FS</td>\n<td>60</td>\n<td>&lt;</td>\n<td>92</td>\n<td>/</td>\n<td>124</td>\n<td>|</td>\n</tr>\n<tr>\n<td>29</td>\n<td>GS</td>\n<td>61</td>\n<td>=</td>\n<td>93</td>\n<td>]</td>\n<td>125</td>\n<td>}</td>\n</tr>\n<tr>\n<td>30</td>\n<td>RS</td>\n<td>62</td>\n<td>&gt;</td>\n<td>94</td>\n<td>^</td>\n<td>126</td>\n<td>`        |</td>\n</tr>\n<tr>\n<td>31</td>\n<td>US</td>\n<td>63</td>\n<td>?</td>\n<td>95</td>\n<td>_</td>\n<td>127</td>\n<td>DEL</td>\n</tr>\n</tbody>\n</table>\n<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>\n<ul>\n<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>\n<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>\n</ul>\n<h3 id=\"25-转义字符\"><a class=\"anchor\" href=\"#25-转义字符\">#</a> 2.5 转义字符</h3>\n<p>** 作用：** 用于表示一些<mark>不能显示出来的 ASCII 字符</mark></p>\n<p>现阶段我们常用的转义字符有： <code> \\n  \\\\  \\t</code></p>\n<table>\n<thead>\n<tr>\n<th><strong>转义字符</strong></th>\n<th><strong>含义</strong></th>\n<th><strong>ASCII</strong> 码值（十进制）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>警报</td>\n<td>007</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格 (BS) ，将当前位置移到前一列</td>\n<td>008</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页 (FF)，将当前位置移到下页开头</td>\n<td>012</td>\n</tr>\n<tr>\n<td><strong>\\n</strong></td>\n<td><strong>换行 (LF) ，将当前位置移到下一行开头</strong></td>\n<td><strong>010</strong></td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车 (CR) ，将当前位置移到本行开头</td>\n<td>013</td>\n</tr>\n<tr>\n<td><strong>\\t</strong></td>\n<td><strong>水平制表 (HT)  （跳到下一个 TAB 位置）</strong></td>\n<td><strong>009</strong></td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表 (VT)</td>\n<td>011</td>\n</tr>\n<tr>\n<td><strong>\\\\</strong></td>\n<td><strong>代表一个反斜线字符 &quot;&quot;</strong></td>\n<td><strong>092</strong></td>\n</tr>\n<tr>\n<td>'</td>\n<td>代表一个单引号（撇号）字符</td>\n<td>039</td>\n</tr>\n<tr>\n<td>&quot;</td>\n<td>代表一个双引号字符</td>\n<td>034</td>\n</tr>\n<tr>\n<td>?</td>\n<td>代表一个问号</td>\n<td>063</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>数字 0</td>\n<td>000</td>\n</tr>\n<tr>\n<td>\\ddd</td>\n<td>8 进制转义字符，d 范围 0~7</td>\n<td>3 位 8 进制</td>\n</tr>\n<tr>\n<td>\\xhh</td>\n<td>16 进制转义字符，h 范围 0<sub>9，a</sub>f，A~F</td>\n<td>3 位 16 进制</td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\t\n\t\n\tcout &lt;&lt; &quot;\\\\&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;\\tHello&quot; &lt;&lt; endl;\n\tcout &lt;&lt; &quot;\\n&quot; &lt;&lt; endl;\n\n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"26-字符串型\"><a class=\"anchor\" href=\"#26-字符串型\">#</a> 2.6 字符串型</h3>\n<p><strong>作用</strong>：用于表示一串字符</p>\n<p><strong>两种风格</strong></p>\n<ol>\n<li>\n<p><strong>C 风格字符串</strong>：  <code>char 变量名[] = &quot;字符串值&quot;</code></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\n\n\tchar str1[] = &quot;hello world&quot;;\n\tcout &lt;&lt; str1 &lt;&lt; endl;\n    \n\tsystem(&quot;pause&quot;);\n\n\treturn 0;\n&#125;\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>注意：C 风格的字符串要用双引号括起来</p>\n</blockquote>\n<ol>\n<li>\n<p><strong>C++ 风格字符串</strong>：   <code>string  变量名 = &quot;字符串值&quot;</code></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\tstring str = &quot;hello world&quot;;\tcout &lt;&lt; str &lt;&lt; endl;\t\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>注意：C++ 风格字符串，需要加入头文件 ==#include&lt;string&gt;==</p>\n</blockquote>\n<h3 id=\"27-布尔类型-bool\"><a class=\"anchor\" href=\"#27-布尔类型-bool\">#</a> 2.7 布尔类型 bool</h3>\n<p>** 作用：** 布尔数据类型代表真或假的值</p>\n<p>bool 类型只有两个值：</p>\n<ul>\n<li>true  --- 真（本质是 1）</li>\n<li>false --- 假（本质是 0）</li>\n</ul>\n<p><strong>bool 类型占<mark> 1 个字节</mark>大小</strong></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\tbool flag = true;\tcout &lt;&lt; flag &lt;&lt; endl; // 1\tflag = false;\tcout &lt;&lt; flag &lt;&lt; endl; // 0\tcout &lt;&lt; &quot;size of bool = &quot; &lt;&lt; sizeof(bool) &lt;&lt; endl; //1\t\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<h3 id=\"28-数据的输入\"><a class=\"anchor\" href=\"#28-数据的输入\">#</a> 2.8 数据的输入</h3>\n<p><strong>作用：用于从键盘获取数据</strong></p>\n<p>** 关键字：**cin</p>\n<p><strong>语法：</strong>  <code>cin &gt;&gt; 变量 </code></p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main()&#123;\t//整型输入\tint a = 0;\tcout &lt;&lt; &quot;请输入整型变量：&quot; &lt;&lt; endl;\tcin &gt;&gt; a;\tcout &lt;&lt; a &lt;&lt; endl;\t//浮点型输入\tdouble d = 0;\tcout &lt;&lt; &quot;请输入浮点型变量：&quot; &lt;&lt; endl;\tcin &gt;&gt; d;\tcout &lt;&lt; d &lt;&lt; endl;\t//字符型输入\tchar ch = 0;\tcout &lt;&lt; &quot;请输入字符型变量：&quot; &lt;&lt; endl;\tcin &gt;&gt; ch;\tcout &lt;&lt; ch &lt;&lt; endl;\t//字符串型输入\tstring str;\tcout &lt;&lt; &quot;请输入字符串型变量：&quot; &lt;&lt; endl;\tcin &gt;&gt; str;\tcout &lt;&lt; str &lt;&lt; endl;\t//布尔类型输入\tbool flag = true;\tcout &lt;&lt; &quot;请输入布尔型变量：&quot; &lt;&lt; endl;\tcin &gt;&gt; flag;\tcout &lt;&lt; flag &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn EXIT_SUCCESS;&#125;\n</code></pre>\n<h2 id=\"3-运算符\"><a class=\"anchor\" href=\"#3-运算符\">#</a> 3 运算符</h2>\n<p>** 作用：** 用于执行代码的运算</p>\n<p>本章我们主要讲解以下几类运算符：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符类型</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>算术运算符</td>\n<td>用于处理四则运算</td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>用于将表达式的值赋给变量</td>\n</tr>\n<tr>\n<td>比较运算符</td>\n<td>用于表达式的比较，并返回一个真值或假值</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td>用于根据表达式的值返回真值或假值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"31-算术运算符\"><a class=\"anchor\" href=\"#31-算术运算符\">#</a> 3.1 算术运算符</h3>\n<p><strong>作用</strong>：用于处理四则运算</p>\n<p>算术运算符包括以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>正号</td>\n<td>+3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>-</td>\n<td>负号</td>\n<td>-3</td>\n<td>-3</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加</td>\n<td>10 + 5</td>\n<td>15</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>10 - 5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n<td>10 * 5</td>\n<td>50</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除</td>\n<td>10 / 5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模 (取余)</td>\n<td>10 % 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>++</td>\n<td>前置递增</td>\n<td>a=2; b=++a;</td>\n<td>a=3; b=3;</td>\n</tr>\n<tr>\n<td>++</td>\n<td>后置递增</td>\n<td>a=2; b=a++;</td>\n<td>a=3; b=2;</td>\n</tr>\n<tr>\n<td>--</td>\n<td>前置递减</td>\n<td>a=2; b=--a;</td>\n<td>a=1; b=1;</td>\n</tr>\n<tr>\n<td>--</td>\n<td>后置递减</td>\n<td>a=2; b=a--;</td>\n<td>a=1; b=2;</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例 1：</strong></p>\n<pre><code class=\"language-C++\">//加减乘除int main() &#123;\tint a1 = 10;\tint b1 = 3;\tcout &lt;&lt; a1 + b1 &lt;&lt; endl;\tcout &lt;&lt; a1 - b1 &lt;&lt; endl;\tcout &lt;&lt; a1 * b1 &lt;&lt; endl;\tcout &lt;&lt; a1 / b1 &lt;&lt; endl;  //两个整数相除结果依然是整数\tint a2 = 10;\tint b2 = 20;\tcout &lt;&lt; a2 / b2 &lt;&lt; endl; \tint a3 = 10;\tint b3 = 0;\t//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0\t//两个小数可以相除\tdouble d1 = 0.5;\tdouble d2 = 0.25;\tcout &lt;&lt; d1 / d2 &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结：在除法运算中，除数不能为 0</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<pre><code class=\"language-C++\">//取模int main() &#123;\tint a1 = 10;\tint b1 = 3;\tcout &lt;&lt; 10 % 3 &lt;&lt; endl;\tint a2 = 10;\tint b2 = 20;\tcout &lt;&lt; a2 % b2 &lt;&lt; endl;\tint a3 = 10;\tint b3 = 0;\t//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0\t//两个小数不可以取模\tdouble d1 = 3.14;\tdouble d2 = 1.1;\t//cout &lt;&lt; d1 % d2 &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结：只有整型变量可以进行取模运算</p>\n</blockquote>\n<p><strong>示例 3：</strong></p>\n<pre><code class=\"language-C++\">//递增int main() &#123;\t//后置递增\tint a = 10;\ta++; //等价于a = a + 1\tcout &lt;&lt; a &lt;&lt; endl; // 11\t//前置递增\tint b = 10;\t++b;\tcout &lt;&lt; b &lt;&lt; endl; // 11\t//区别\t//前置递增先对变量进行++，再计算表达式\tint a2 = 10;\tint b2 = ++a2 * 10;\tcout &lt;&lt; b2 &lt;&lt; endl;\t//后置递增先计算表达式，后对变量进行++\tint a3 = 10;\tint b3 = a3++ * 10;\tcout &lt;&lt; b3 &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结：前置递增先对变量进行 ++，再计算表达式，后置递增相反</p>\n</blockquote>\n<h3 id=\"32-赋值运算符\"><a class=\"anchor\" href=\"#32-赋值运算符\">#</a> 3.2 赋值运算符</h3>\n<p>** 作用：** 用于将表达式的值赋给变量</p>\n<p>赋值运算符包括以下几个符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>赋值</td>\n<td>a=2; b=3;</td>\n<td>a=2; b=3;</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>加等于</td>\n<td>a=0; a+=2;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>减等于</td>\n<td>a=5; a-=3;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>乘等于</td>\n<td>a=2; a*=2;</td>\n<td>a=4;</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>除等于</td>\n<td>a=4; a/=2;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>模等于</td>\n<td>a=3; a%2;</td>\n<td>a=1;</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\t//赋值运算符\t// =\tint a = 10;\ta = 100;\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\t// +=\ta = 10;\ta += 2; // a = a + 2;\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\t// -=\ta = 10;\ta -= 2; // a = a - 2\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\t// *=\ta = 10;\ta *= 2; // a = a * 2\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\t// /=\ta = 10;\ta /= 2;  // a = a / 2;\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\t// %=\ta = 10;\ta %= 2;  // a = a % 2;\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<h3 id=\"33-比较运算符\"><a class=\"anchor\" href=\"#33-比较运算符\">#</a> 3.3 比较运算符</h3>\n<p>** 作用：** 用于表达式的比较，并返回一个真值或假值</p>\n<p>比较运算符有以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>相等于</td>\n<td>4 == 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>4 != 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>4 &lt; 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>4 &gt; 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>4 &lt;= 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>4 &gt;= 1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\tint a = 10;\tint b = 20;\tcout &lt;&lt; (a == b) &lt;&lt; endl; // 0 \tcout &lt;&lt; (a != b) &lt;&lt; endl; // 1\tcout &lt;&lt; (a &gt; b) &lt;&lt; endl; // 0\tcout &lt;&lt; (a &lt; b) &lt;&lt; endl; // 1\tcout &lt;&lt; (a &gt;= b) &lt;&lt; endl; // 0\tcout &lt;&lt; (a &lt;= b) &lt;&lt; endl; // 1\t\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>注意：C 和 C++ 语言的比较运算中， <mark>“真” 用数字 “1” 来表示， “假” 用数字 “0” 来表示。</mark></p>\n</blockquote>\n<h3 id=\"34-逻辑运算符\"><a class=\"anchor\" href=\"#34-逻辑运算符\">#</a> 3.4 逻辑运算符</h3>\n<p>** 作用：** 用于根据表达式的值返回真值或假值</p>\n<p>逻辑运算符有以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>!</td>\n<td>非</td>\n<td>!a</td>\n<td>如果 a 为假，则！a 为真；  如果 a 为真，则！a 为假。</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>与</td>\n<td>a &amp;&amp; b</td>\n<td>如果 a 和 b 都为真，则结果为真，否则为假。</td>\n</tr>\n<tr>\n<td>||</td>\n<td>或</td>\n<td>a || b</td>\n<td>如果 a 和 b 有一个为真，则结果为真，二者都为假时，结果为假。</td>\n</tr>\n</tbody>\n</table>\n<p>** 示例 1：** 逻辑非</p>\n<pre><code class=\"language-C++\">//逻辑运算符  --- 非int main() &#123;\tint a = 10;\tcout &lt;&lt; !a &lt;&lt; endl; // 0\tcout &lt;&lt; !!a &lt;&lt; endl; // 1\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结： 真变假，假变真</p>\n</blockquote>\n<p>** 示例 2：** 逻辑与</p>\n<pre><code class=\"language-C++\">//逻辑运算符  --- 与int main() &#123;\tint a = 10;\tint b = 10;\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 1\ta = 10;\tb = 0;\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0 \ta = 0;\tb = 0;\tcout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结：逻辑<mark>与</mark>运算符总结： <mark>同真为真，其余为假</mark></p>\n</blockquote>\n<p>** 示例 3：** 逻辑或</p>\n<pre><code class=\"language-c++\">//逻辑运算符  --- 或int main() &#123;\tint a = 10;\tint b = 10;\tcout &lt;&lt; (a || b) &lt;&lt; endl;// 1\ta = 10;\tb = 0;\tcout &lt;&lt; (a || b) &lt;&lt; endl;// 1 \ta = 0;\tb = 0;\tcout &lt;&lt; (a || b) &lt;&lt; endl;// 0\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>逻辑<mark>或</mark>运算符总结： <mark>同假为假，其余为真</mark></p>\n</blockquote>\n<h2 id=\"4-程序流程结构\"><a class=\"anchor\" href=\"#4-程序流程结构\">#</a> 4 程序流程结构</h2>\n<p>C/C++ 支持最基本的三种程序运行结构：<mark>顺序结构、选择结构、循环结构</mark></p>\n<ul>\n<li>顺序结构：程序按顺序执行，不发生跳转</li>\n<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>\n<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>\n</ul>\n<h3 id=\"41-选择结构\"><a class=\"anchor\" href=\"#41-选择结构\">#</a> 4.1 选择结构</h3>\n<h4 id=\"411-if语句\"><a class=\"anchor\" href=\"#411-if语句\">#</a> 4.1.1 if 语句</h4>\n<p>** 作用：** 执行满足条件的语句</p>\n<p>if 语句的三种形式</p>\n<ul>\n<li>\n<p>单行格式 if 语句</p>\n</li>\n<li>\n<p>多行格式 if 语句</p>\n</li>\n<li>\n<p>多条件的 if 语句</p>\n</li>\n</ul>\n<ol>\n<li>\n<p>单行格式 if 语句： <code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p>\n<p>![img](../../../../Downloads/【黑马】C<ins> 教程从 0 到 1 入门编程，学习编程不再难 / 第 1 阶段 C</ins> 匠心之作 从 0 到 1 入门资料 / 学习 C<ins> 不再难资料 / C</ins> 基础入门讲义 /assets/clip_image002.png)</p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\t//选择结构-单行if语句\t//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印\tint score = 0;\tcout &lt;&lt; &quot;请输入一个分数：&quot; &lt;&lt; endl;\tcin &gt;&gt; score;\tcout &lt;&lt; &quot;您输入的分数为： &quot; &lt;&lt; score &lt;&lt; endl;\t//if语句\t//注意事项，在if判断语句后面，不要加分号\tif (score &gt; 600)\t&#123;\t\tcout &lt;&lt; &quot;我考上了一本大学！！！&quot; &lt;&lt; endl;\t&#125;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>注意：if 条件表达式后不要加分号</p>\n</blockquote>\n<ol start=\"2\">\n<li>多行格式 if 语句： <code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li>\n</ol>\n<p>![img](../../../../Downloads/【黑马】C<ins> 教程从 0 到 1 入门编程，学习编程不再难 / 第 1 阶段 C</ins> 匠心之作 从 0 到 1 入门资料 / 学习 C<ins> 不再难资料 / C</ins> 基础入门讲义 /assets/clip_image002-1541662519170.png)</p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\tint score = 0;\tcout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;\tcin &gt;&gt; score;\tif (score &gt; 600)\t&#123;\t\tcout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;\t&#125;\telse\t&#123;\t\tcout &lt;&lt; &quot;我未考上一本大学&quot; &lt;&lt; endl;\t&#125;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<ol start=\"3\">\n<li>多条件的 if 语句： <code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li>\n</ol>\n<p>![img](../../../../Downloads/【黑马】C<ins> 教程从 0 到 1 入门编程，学习编程不再难 / 第 1 阶段 C</ins> 匠心之作 从 0 到 1 入门资料 / 学习 C<ins> 不再难资料 / C</ins> 基础入门讲义 /assets/clip_image002-1541662566808.png)</p>\n<p>示例：</p>\n<pre><code class=\"language-C++\">\tint main() &#123;\tint score = 0;\tcout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;\tcin &gt;&gt; score;\tif (score &gt; 600)\t&#123;\t\tcout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;\t&#125;\telse if (score &gt; 500)\t&#123;\t\tcout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;\t&#125;\telse if (score &gt; 400)\t&#123;\t\tcout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;\t&#125;\telse\t&#123;\t\tcout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;\t&#125;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<p><strong>嵌套 if 语句</strong>：在 if 语句中，可以嵌套使用 if 语句，达到更精确的条件判断</p>\n<p>案例需求：</p>\n<ul>\n<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>\n<li>分数如果大于 600 分视为考上一本，大于 500 分考上二本，大于 400 考上三本，其余视为未考上本科；</li>\n<li>在一本分数中，如果大于 700 分，考入北大，大于 650 分，考入清华，大于 600 考入人大。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">int main() &#123;\tint score = 0;\tcout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;\tcin &gt;&gt; score;\tif (score &gt; 600)\t&#123;\t\tcout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;\t\tif (score &gt; 700)\t\t&#123;\t\t\tcout &lt;&lt; &quot;我考上了北大&quot; &lt;&lt; endl;\t\t&#125;\t\telse if (score &gt; 650)\t\t&#123;\t\t\tcout &lt;&lt; &quot;我考上了清华&quot; &lt;&lt; endl;\t\t&#125;\t\telse\t\t&#123;\t\t\tcout &lt;&lt; &quot;我考上了人大&quot; &lt;&lt; endl;\t\t&#125;\t\t\t&#125;\telse if (score &gt; 500)\t&#123;\t\tcout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;\t&#125;\telse if (score &gt; 400)\t&#123;\t\tcout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;\t&#125;\telse\t&#123;\t\tcout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;\t&#125;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<p><strong>练习案例：</strong> 三只小猪称体重</p>\n<p>有三只小猪 ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？![三只小猪](../../../../Downloads/【黑马】C<ins> 教程从 0 到 1 入门编程，学习编程不再难 / 第 1 阶段 C</ins> 匠心之作 从 0 到 1 入门资料 / 学习 C<ins> 不再难资料 / C</ins> 基础入门讲义 /assets/ 三只小猪.jpg)</p>\n<h4 id=\"412-三目运算符\"><a class=\"anchor\" href=\"#412-三目运算符\">#</a> 4.1.2 三目运算符</h4>\n<p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>\n<p><strong>语法：</strong> <code>表达式1 ? 表达式2 ：表达式3</code></p>\n<p><strong>解释：</strong></p>\n<p>如果表达式 1 的值为真，执行表达式 2，并返回表达式 2 的结果；</p>\n<p>如果表达式 1 的值为假，执行表达式 3，并返回表达式 3 的结果。</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\tint a = 10;\tint b = 20;\tint c = 0;\tc = a &gt; b ? a : b;\tcout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;\t//C++中三目运算符返回的是变量,可以继续赋值\t(a &gt; b ? a : b) = 100;\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;\tcout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结：和 if 语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>\n</blockquote>\n<h4 id=\"413-switch语句\"><a class=\"anchor\" href=\"#413-switch语句\">#</a> 4.1.3 switch 语句</h4>\n<p>** 作用：** 执行多条件分支语句</p>\n<p><strong>语法：</strong></p>\n<pre><code class=\"language-C++\">switch(表达式)&#123;\tcase 结果1：执行语句;break;\tcase 结果2：执行语句;break;\t...\tdefault:执行语句;break;&#125;\n</code></pre>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\t//请给电影评分 \t//10 ~ 9   经典   \t// 8 ~ 7   非常好\t// 6 ~ 5   一般\t// 5分以下 烂片\tint score = 0;\tcout &lt;&lt; &quot;请给电影打分&quot; &lt;&lt; endl;\tcin &gt;&gt; score;\tswitch (score)\t&#123;\tcase 10:\tcase 9:\t\tcout &lt;&lt; &quot;经典&quot; &lt;&lt; endl;\t\tbreak;\tcase 8:\t\tcout &lt;&lt; &quot;非常好&quot; &lt;&lt; endl;\t\tbreak;\tcase 7:\tcase 6:\t\tcout &lt;&lt; &quot;一般&quot; &lt;&lt; endl;\t\tbreak;\tdefault:\t\tcout &lt;&lt; &quot;烂片&quot; &lt;&lt; endl;\t\tbreak;\t&#125;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>注意 1：switch 语句中表达式类型只能是整型或者字符型</p>\n</blockquote>\n<blockquote>\n<p>注意 2：case 里如果没有 break，那么程序会一直向下执行</p>\n</blockquote>\n<blockquote>\n<p>总结：与 if 语句比，对于多条件判断时，switch 的结构清晰，执行效率高，缺点是 switch 不可以判断区间</p>\n</blockquote>\n<h3 id=\"42-循环结构\"><a class=\"anchor\" href=\"#42-循环结构\">#</a> 4.2 循环结构</h3>\n<h4 id=\"421-while循环语句\"><a class=\"anchor\" href=\"#421-while循环语句\">#</a> 4.2.1 while 循环语句</h4>\n<p>** 作用：** 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong> <code> while(循环条件)&#123; 循环语句 &#125;</code></p>\n<p><strong>解释：</strong><mark>只要循环条件的结果为真，就执行循环语句</mark></p>\n<p>![img](../../../../Downloads/【黑马】C<ins> 教程从 0 到 1 入门编程，学习编程不再难 / 第 1 阶段 C</ins> 匠心之作 从 0 到 1 入门资料 / 学习 C<ins> 不再难资料 / C</ins> 基础入门讲义 /assets/clip_image002-1541668640382.png)</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\tint num = 0;\twhile (num &lt; 10)\t&#123;\t\tcout &lt;&lt; &quot;num = &quot; &lt;&lt; num &lt;&lt; endl;\t\tnum++;\t&#125;\t\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>\n</blockquote>\n<p><strong>while 循环练习案例：</strong><mark>猜数字</mark></p>\n<p>** 案例描述：** 系统随机生成一个 1 到 100 之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>\n<p>![猜数字](../../../../Downloads/【黑马】C<ins> 教程从 0 到 1 入门编程，学习编程不再难 / 第 1 阶段 C</ins> 匠心之作 从 0 到 1 入门资料 / 学习 C<ins> 不再难资料 / C</ins> 基础入门讲义 /assets/ 猜数字.jpg)</p>\n<h4 id=\"422-dowhile循环语句\"><a class=\"anchor\" href=\"#422-dowhile循环语句\">#</a> 4.2.2 do...while 循环语句</h4>\n<p><strong>作用：</strong> 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong>  <code>do&#123; 循环语句 &#125; while(循环条件);</code></p>\n<p>** 注意：** 与 while 的区别在于<mark> do...while 会先执行一次循环语句</mark>，再判断循环条件</p>\n<p>![img](../../../../Downloads/【黑马】C<ins> 教程从 0 到 1 入门编程，学习编程不再难 / 第 1 阶段 C</ins> 匠心之作 从 0 到 1 入门资料 / 学习 C<ins> 不再难资料 / C</ins> 基础入门讲义 /assets/clip_image002-1541671163478.png)</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\tint num = 0;\tdo\t&#123;\t\tcout &lt;&lt; num &lt;&lt; endl;\t\tnum++;\t&#125; while (num &lt; 10);\t\t\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结：与 while 循环区别在于，do...while 先执行一次循环语句，再判断循环条件</p>\n</blockquote>\n<p><strong>练习案例：水仙花数</strong></p>\n<p>** 案例描述：** 水仙花数是指一个 3 位数，它的每个位上的数字的 3 次幂之和等于它本身</p>\n<p>例如：1^3 + 5^3+ 3^3 = 153</p>\n<p>请利用 do...while 语句，求出所有 3 位数中的水仙花数</p>\n<h4 id=\"423-for循环语句\"><a class=\"anchor\" href=\"#423-for循环语句\">#</a> 4.2.3 for 循环语句</h4>\n<p><strong>作用：</strong> 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong> <code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\tfor (int i = 0; i &lt; 10; i++)\t&#123;\t\tcout &lt;&lt; i &lt;&lt; endl;\t&#125;\t\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<p><strong>详解：</strong></p>\n<p>![1541673704101](../../../../Downloads/【黑马】C<ins> 教程从 0 到 1 入门编程，学习编程不再难 / 第 1 阶段 C</ins> 匠心之作 从 0 到 1 入门资料 / 学习 C<ins> 不再难资料 / C</ins> 基础入门讲义 /assets/1541673704101.png)</p>\n<blockquote>\n<p>注意：for 循环中的表达式，要用分号进行分隔</p>\n</blockquote>\n<blockquote>\n<p>总结：while , do...while, for 都是开发中常用的循环语句，for 循环结构比较清晰，比较常用</p>\n</blockquote>\n<p><strong>练习案例：敲桌子</strong></p>\n<p>案例描述：从 1 开始数到数字 100， 如果数字个位含有 7，或者数字十位含有 7，或者该数字是 7 的倍数，我们打印敲桌子，其余数字直接打印输出。</p>\n<p>![timg](../../../../Downloads/【黑马】C<ins> 教程从 0 到 1 入门编程，学习编程不再难 / 第 1 阶段 C</ins> 匠心之作 从 0 到 1 入门资料 / 学习 C<ins> 不再难资料 / C</ins> 基础入门讲义 /assets/timg.gif)</p>\n<h4 id=\"424-嵌套循环\"><a class=\"anchor\" href=\"#424-嵌套循环\">#</a> 4.2.4 嵌套循环</h4>\n<p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>\n<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>\n<p>![1541676003486](../../../../Downloads/【黑马】C<ins> 教程从 0 到 1 入门编程，学习编程不再难 / 第 1 阶段 C</ins> 匠心之作 从 0 到 1 入门资料 / 学习 C<ins> 不再难资料 / C</ins> 基础入门讲义 /assets/1541676003486.png)</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\t//外层循环执行1次，内层循环执行1轮\tfor (int i = 0; i &lt; 10; i++)\t&#123;\t\tfor (int j = 0; j &lt; 10; j++)\t\t&#123;\t\t\tcout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;\t\t&#125;\t\tcout &lt;&lt; endl;\t&#125;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<p>** 练习案例：** 乘法口诀表</p>\n<p>案例描述：利用嵌套循环，实现九九乘法表</p>\n<p>![0006018857256120_b](../../../../Downloads/【黑马】C<ins> 教程从 0 到 1 入门编程，学习编程不再难 / 第 1 阶段 C</ins> 匠心之作 从 0 到 1 入门资料 / 学习 C<ins> 不再难资料 / C</ins> 基础入门讲义 /assets/0006018857256120_b.jpg)</p>\n<h3 id=\"43-跳转语句\"><a class=\"anchor\" href=\"#43-跳转语句\">#</a> 4.3 跳转语句</h3>\n<h4 id=\"431-break语句\"><a class=\"anchor\" href=\"#431-break语句\">#</a> 4.3.1 break 语句</h4>\n<p><strong>作用:</strong> 用于跳出<mark>选择结构</mark>或者<mark>循环结构</mark></p>\n<p>break 使用的时机：</p>\n<ul>\n<li>出现在 switch 条件语句中，作用是终止 case 并跳出 switch</li>\n<li>出现在循环语句中，作用是跳出当前的循环语句</li>\n<li>出现在嵌套循环中，跳出最近的内层循环语句</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\t//1、在switch 语句中使用break\tcout &lt;&lt; &quot;请选择您挑战副本的难度：&quot; &lt;&lt; endl;\tcout &lt;&lt; &quot;1、普通&quot; &lt;&lt; endl;\tcout &lt;&lt; &quot;2、中等&quot; &lt;&lt; endl;\tcout &lt;&lt; &quot;3、困难&quot; &lt;&lt; endl;\tint num = 0;\tcin &gt;&gt; num;\tswitch (num)\t&#123;\tcase 1:\t\tcout &lt;&lt; &quot;您选择的是普通难度&quot; &lt;&lt; endl;\t\tbreak;\tcase 2:\t\tcout &lt;&lt; &quot;您选择的是中等难度&quot; &lt;&lt; endl;\t\tbreak;\tcase 3:\t\tcout &lt;&lt; &quot;您选择的是困难难度&quot; &lt;&lt; endl;\t\tbreak;\t&#125;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\t//2、在循环语句中用break\tfor (int i = 0; i &lt; 10; i++)\t&#123;\t\tif (i == 5)\t\t&#123;\t\t\tbreak; //跳出循环语句\t\t&#125;\t\tcout &lt;&lt; i &lt;&lt; endl;\t&#125;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\t//在嵌套循环语句中使用break，退出内层循环\tfor (int i = 0; i &lt; 10; i++)\t&#123;\t\tfor (int j = 0; j &lt; 10; j++)\t\t&#123;\t\t\tif (j == 5)\t\t\t&#123;\t\t\t\tbreak;\t\t\t&#125;\t\t\tcout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;\t\t&#125;\t\tcout &lt;&lt; endl;\t&#125;\t\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<h4 id=\"432-continue语句\"><a class=\"anchor\" href=\"#432-continue语句\">#</a> 4.3.2 continue 语句</h4>\n<p>** 作用：** 在<mark>循环语句</mark>中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\tfor (int i = 0; i &lt; 100; i++)\t&#123;\t\tif (i % 2 == 0)\t\t&#123;\t\t\tcontinue;\t\t&#125;\t\tcout &lt;&lt; i &lt;&lt; endl;\t&#125;\t\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>注意：continue 并没有使整个循环终止，而 break 会跳出循环</p>\n</blockquote>\n<h4 id=\"433-goto语句\"><a class=\"anchor\" href=\"#433-goto语句\">#</a> 4.3.3 goto 语句</h4>\n<p>** 作用：** 可以无条件跳转语句</p>\n<p><strong>语法：</strong>  <code>goto 标记;</code></p>\n<p>** 解释：** 如果标记的名称存在，执行到 goto 语句时，会跳转到标记的位置</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\tcout &lt;&lt; &quot;1&quot; &lt;&lt; endl;\tgoto FLAG;\tcout &lt;&lt; &quot;2&quot; &lt;&lt; endl;\tcout &lt;&lt; &quot;3&quot; &lt;&lt; endl;\tcout &lt;&lt; &quot;4&quot; &lt;&lt; endl;\tFLAG:\tcout &lt;&lt; &quot;5&quot; &lt;&lt; endl;\t\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>注意：在程序中不建议使用 goto 语句，以免造成程序流程混乱</p>\n</blockquote>\n<h2 id=\"5-数组\"><a class=\"anchor\" href=\"#5-数组\">#</a> 5 数组</h2>\n<h3 id=\"51-概述\"><a class=\"anchor\" href=\"#51-概述\">#</a> 5.1 概述</h3>\n<p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>\n<p>** 特点 1：** 数组中的每个<mark>数据元素都是相同的数据类型</mark></p>\n<p>** 特点 2：** 数组是由<mark>连续的内存</mark>位置组成的</p>\n<p>![1541748375356](../../../../Downloads/【黑马】C<ins> 教程从 0 到 1 入门编程，学习编程不再难 / 第 1 阶段 C</ins> 匠心之作 从 0 到 1 入门资料 / 学习 C<ins> 不再难资料 / C</ins> 基础入门讲义 /assets/1541748375356.png)</p>\n<h3 id=\"52-一维数组\"><a class=\"anchor\" href=\"#52-一维数组\">#</a> 5.2 一维数组</h3>\n<h4 id=\"521-一维数组定义方式\"><a class=\"anchor\" href=\"#521-一维数组定义方式\">#</a> 5.2.1 一维数组定义方式</h4>\n<p>一维数组定义的三种方式：</p>\n<ol>\n<li><code>数据类型  数组名[ 数组长度 ];</code></li>\n<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>\n<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>\n</ol>\n<p>示例</p>\n<pre><code class=\"language-C++\">int main() &#123;\t//定义方式1\t//数据类型 数组名[元素个数];\tint score[10];\t//利用下标赋值\tscore[0] = 100;\tscore[1] = 99;\tscore[2] = 85;\t//利用下标输出\tcout &lt;&lt; score[0] &lt;&lt; endl;\tcout &lt;&lt; score[1] &lt;&lt; endl;\tcout &lt;&lt; score[2] &lt;&lt; endl;\t//第二种定义方式\t//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;\t//如果&#123;&#125;内不足10个数据，剩余数据用0补全\tint score2[10] = &#123; 100, 90,80,70,60,50,40,30,20,10 &#125;;\t\t//逐个输出\t//cout &lt;&lt; score2[0] &lt;&lt; endl;\t//cout &lt;&lt; score2[1] &lt;&lt; endl;\t//一个一个输出太麻烦，因此可以利用循环进行输出\tfor (int i = 0; i &lt; 10; i++)\t&#123;\t\tcout &lt;&lt; score2[i] &lt;&lt; endl;\t&#125;\t//定义方式3\t//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;\tint score3[] = &#123; 100,90,80,70,60,50,40,30,20,10 &#125;;\tfor (int i = 0; i &lt; 10; i++)\t&#123;\t\tcout &lt;&lt; score3[i] &lt;&lt; endl;\t&#125;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结 1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>\n</blockquote>\n<blockquote>\n<p>总结 2：数组中下标是从 0 开始索引</p>\n</blockquote>\n<h4 id=\"522-一维数组数组名\"><a class=\"anchor\" href=\"#522-一维数组数组名\">#</a> 5.2.2 一维数组数组名</h4>\n<p>一维数组名称的<strong>用途</strong>：</p>\n<ol>\n<li>可以统计整个数组在内存中的长度</li>\n<li>可以获取数组在内存中的首地址</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\t//数组名用途\t//1、可以获取整个数组占用内存空间大小\tint arr[10] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;\tcout &lt;&lt; &quot;整个数组所占内存空间为： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;\tcout &lt;&lt; &quot;每个元素所占内存空间为： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;\tcout &lt;&lt; &quot;数组的元素个数为： &quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;\t//2、可以通过数组名获取到数组首地址\tcout &lt;&lt; &quot;数组首地址为： &quot; &lt;&lt; (int)arr &lt;&lt; endl;\tcout &lt;&lt; &quot;数组中第一个元素地址为： &quot; &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl;\tcout &lt;&lt; &quot;数组中第二个元素地址为： &quot; &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl;\t//arr = 100; 错误，数组名是常量，因此不可以赋值\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>注意：数组名是常量，不可以赋值</p>\n</blockquote>\n<blockquote>\n<p>总结 1：直接打印数组名，可以查看数组所占内存的首地址</p>\n</blockquote>\n<blockquote>\n<p>总结 2：对数组名进行 sizeof，可以获取整个数组占内存空间的大小</p>\n</blockquote>\n<p><strong>练习案例 1</strong>：五只小猪称体重</p>\n<p><strong>案例描述：</strong></p>\n<p>在一个数组中记录了五只小猪的体重，如：int arr [5] = {300,350,200,400,250};</p>\n<p>找出并打印最重的小猪体重。</p>\n<p>** 练习案例 2：** 数组元素逆置</p>\n<p>** 案例描述：** 请声明一个 5 个元素的数组，并且将元素逆置.</p>\n<p>(如原数组元素为：1,3,2,5,4; 逆置后输出结果为：4,5,2,3,1);</p>\n<h4 id=\"523-冒泡排序\"><a class=\"anchor\" href=\"#523-冒泡排序\">#</a> 5.2.3 冒泡排序</h4>\n<p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>\n<li>重复以上的步骤，每次比较次数 - 1，直到不需要比较</li>\n</ol>\n<p>![1541905327273](../../../../Downloads/【黑马】C<ins> 教程从 0 到 1 入门编程，学习编程不再难 / 第 1 阶段 C</ins> 匠心之作 从 0 到 1 入门资料 / 学习 C<ins> 不再难资料 / C</ins> 基础入门讲义 /assets/1541905327273.png)</p>\n<p><strong>示例：</strong> 将数组 {4,2,8,0,5,7,1,3,9} 进行升序排序</p>\n<pre><code class=\"language-C++\">int main() &#123;\tint arr[9] = &#123; 4,2,8,0,5,7,1,3,9 &#125;;\tfor (int i = 0; i &lt; 9 - 1; i++)\t&#123;\t\tfor (int j = 0; j &lt; 9 - 1 - i; j++)\t\t&#123;\t\t\tif (arr[j] &gt; arr[j + 1])\t\t\t&#123;\t\t\t\tint temp = arr[j];\t\t\t\tarr[j] = arr[j + 1];\t\t\t\tarr[j + 1] = temp;\t\t\t&#125;\t\t&#125;\t&#125;\tfor (int i = 0; i &lt; 9; i++)\t&#123;\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;\t&#125;    \tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<h3 id=\"53-二维数组\"><a class=\"anchor\" href=\"#53-二维数组\">#</a> 5.3 二维数组</h3>\n<p>二维数组就是在一维数组上，多加一个维度。</p>\n<p>![1541905559138](../../../../Downloads/【黑马】C<ins> 教程从 0 到 1 入门编程，学习编程不再难 / 第 1 阶段 C</ins> 匠心之作 从 0 到 1 入门资料 / 学习 C<ins> 不再难资料 / C</ins> 基础入门讲义 /assets/1541905559138.png)</p>\n<h4 id=\"531-二维数组定义方式\"><a class=\"anchor\" href=\"#531-二维数组定义方式\">#</a> 5.3.1 二维数组定义方式</h4>\n<p>二维数组定义的四种方式：</p>\n<ol>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>\n<li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>\n</ol>\n<blockquote>\n<p>建议：以上 4 种定义方式，利用<mark>第二种更加直观，提高代码的可读性</mark></p>\n</blockquote>\n<p>示例：</p>\n<pre><code class=\"language-C++\">int main() &#123;\t//方式1  \t//数组类型 数组名 [行数][列数]\tint arr[2][3];\tarr[0][0] = 1;\tarr[0][1] = 2;\tarr[0][2] = 3;\tarr[1][0] = 4;\tarr[1][1] = 5;\tarr[1][2] = 6;\tfor (int i = 0; i &lt; 2; i++)\t&#123;\t\tfor (int j = 0; j &lt; 3; j++)\t\t&#123;\t\t\tcout &lt;&lt; arr[i][j] &lt;&lt; &quot; &quot;;\t\t&#125;\t\tcout &lt;&lt; endl;\t&#125;\t//方式2 \t//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;\tint arr2[2][3] =\t&#123;\t\t&#123;1,2,3&#125;,\t\t&#123;4,5,6&#125;\t&#125;;\t//方式3\t//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;\tint arr3[2][3] = &#123; 1,2,3,4,5,6 &#125;; \t//方式4 \t//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;\tint arr4[][3] = &#123; 1,2,3,4,5,6 &#125;;\t\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>\n</blockquote>\n<h4 id=\"532-二维数组数组名\"><a class=\"anchor\" href=\"#532-二维数组数组名\">#</a> 5.3.2 二维数组数组名</h4>\n<ul>\n<li>查看二维数组所占内存空间</li>\n<li>获取二维数组首地址</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\t//二维数组数组名\tint arr[2][3] =\t&#123;\t\t&#123;1,2,3&#125;,\t\t&#123;4,5,6&#125;\t&#125;;\tcout &lt;&lt; &quot;二维数组大小： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;\tcout &lt;&lt; &quot;二维数组一行大小： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;\tcout &lt;&lt; &quot;二维数组元素大小： &quot; &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;\tcout &lt;&lt; &quot;二维数组行数： &quot; &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;\tcout &lt;&lt; &quot;二维数组列数： &quot; &lt;&lt; sizeof(arr[0]) / sizeof(arr[0][0]) &lt;&lt; endl;\t//地址\tcout &lt;&lt; &quot;二维数组首地址：&quot; &lt;&lt; arr &lt;&lt; endl;\tcout &lt;&lt; &quot;二维数组第一行地址：&quot; &lt;&lt; arr[0] &lt;&lt; endl;\tcout &lt;&lt; &quot;二维数组第二行地址：&quot; &lt;&lt; arr[1] &lt;&lt; endl;\tcout &lt;&lt; &quot;二维数组第一个元素地址：&quot; &lt;&lt; &amp;arr[0][0] &lt;&lt; endl;\tcout &lt;&lt; &quot;二维数组第二个元素地址：&quot; &lt;&lt; &amp;arr[0][1] &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结 1：二维数组名就是这个数组的首地址</p>\n</blockquote>\n<blockquote>\n<p>总结 2：对二维数组名进行 sizeof 时，可以获取整个二维数组占用的内存空间大小</p>\n</blockquote>\n<h4 id=\"533-二维数组应用案例\"><a class=\"anchor\" href=\"#533-二维数组应用案例\">#</a> <strong>5.3.3 二维数组应用案例</strong></h4>\n<p><strong>考试成绩统计：</strong></p>\n<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>语文</th>\n<th>数学</th>\n<th>英语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>张三</td>\n<td>100</td>\n<td>100</td>\n<td>100</td>\n</tr>\n<tr>\n<td>李四</td>\n<td>90</td>\n<td>50</td>\n<td>100</td>\n</tr>\n<tr>\n<td>王五</td>\n<td>60</td>\n<td>70</td>\n<td>80</td>\n</tr>\n</tbody>\n</table>\n<p><strong>参考答案：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\tint scores[3][3] =\t&#123;\t\t&#123;100,100,100&#125;,\t\t&#123;90,50,100&#125;,\t\t&#123;60,70,80&#125;,\t&#125;;\tstring names[3] = &#123; &quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot; &#125;;\tfor (int i = 0; i &lt; 3; i++)\t&#123;\t\tint sum = 0;\t\tfor (int j = 0; j &lt; 3; j++)\t\t&#123;\t\t\tsum += scores[i][j];\t\t&#125;\t\tcout &lt;&lt; names[i] &lt;&lt; &quot;同学总成绩为： &quot; &lt;&lt; sum &lt;&lt; endl;\t&#125;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<h2 id=\"6-函数\"><a class=\"anchor\" href=\"#6-函数\">#</a> 6 函数</h2>\n<h3 id=\"61-概述\"><a class=\"anchor\" href=\"#61-概述\">#</a> 6.1 概述</h3>\n<p>** 作用：** 将一段经常使用的代码封装起来，减少重复代码</p>\n<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>\n<h3 id=\"62-函数的定义\"><a class=\"anchor\" href=\"#62-函数的定义\">#</a> 6.2 函数的定义</h3>\n<p>函数的定义一般主要有 5 个步骤：</p>\n<p>1、返回值类型</p>\n<p>2、函数名</p>\n<p>3、参数表列</p>\n<p>4、函数体语句</p>\n<p>5、return 表达式</p>\n<p><strong>语法：</strong></p>\n<pre><code class=\"language-C++\">返回值类型 函数名 （参数列表）&#123;       函数体语句       return表达式&#125;\n</code></pre>\n<ul>\n<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>\n<li>函数名：给函数起个名称</li>\n<li>参数列表：使用该函数时，传入的数据</li>\n<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>\n<li>return 表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>\n</ul>\n<p>** 示例：** 定义一个加法函数，实现两个数相加</p>\n<pre><code class=\"language-C++\">//函数定义int add(int num1, int num2)&#123;\tint sum = num1 + num2;\treturn sum;&#125;\n</code></pre>\n<h3 id=\"63-函数的调用\"><a class=\"anchor\" href=\"#63-函数的调用\">#</a> 6.3 函数的调用</h3>\n<p>** 功能：** 使用定义好的函数</p>\n<p><strong>语法：</strong> <code> 函数名（参数）</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//函数定义int add(int num1, int num2) //定义中的num1,num2称为形式参数，简称形参&#123;\tint sum = num1 + num2;\treturn sum;&#125;int main() &#123;\tint a = 10;\tint b = 10;\t//调用add函数\tint sum = add(a, b);//调用时的a，b称为实际参数，简称实参\tcout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; endl;\ta = 100;\tb = 100;\tsum = add(a, b);\tcout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>\n</blockquote>\n<h3 id=\"64-值传递\"><a class=\"anchor\" href=\"#64-值传递\">#</a> 6.4 值传递</h3>\n<ul>\n<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>\n<li>值传递时，<mark>如果形参发生，并不会影响实参</mark></li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">void swap(int num1, int num2)&#123;\tcout &lt;&lt; &quot;交换前：&quot; &lt;&lt; endl;\tcout &lt;&lt; &quot;num1 = &quot; &lt;&lt; num1 &lt;&lt; endl;\tcout &lt;&lt; &quot;num2 = &quot; &lt;&lt; num2 &lt;&lt; endl;\tint temp = num1;\tnum1 = num2;\tnum2 = temp;\tcout &lt;&lt; &quot;交换后：&quot; &lt;&lt; endl;\tcout &lt;&lt; &quot;num1 = &quot; &lt;&lt; num1 &lt;&lt; endl;\tcout &lt;&lt; &quot;num2 = &quot; &lt;&lt; num2 &lt;&lt; endl;\t//return ; 当函数声明时候，不需要返回值，可以不写return&#125;int main() &#123;\tint a = 10;\tint b = 20;\tswap(a, b);\tcout &lt;&lt; &quot;mian中的 a = &quot; &lt;&lt; a &lt;&lt; endl;\tcout &lt;&lt; &quot;mian中的 b = &quot; &lt;&lt; b &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结： 值传递时，形参是修饰不了实参的</p>\n</blockquote>\n<h3 id=\"65-函数的常见样式\"><a class=\"anchor\" href=\"#65-函数的常见样式\">#</a> <strong>6.5 函数的常见样式</strong></h3>\n<p>常见的函数样式有 4 种</p>\n<ol>\n<li>无参无返</li>\n<li>有参无返</li>\n<li>无参有返</li>\n<li>有参有返</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//函数常见样式//1、 无参无返void test01()&#123;\t//void a = 10; //无类型不可以创建变量,原因无法分配内存\tcout &lt;&lt; &quot;this is test01&quot; &lt;&lt; endl;\t//test01(); 函数调用&#125;//2、 有参无返void test02(int a)&#123;\tcout &lt;&lt; &quot;this is test02&quot; &lt;&lt; endl;\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;&#125;//3、无参有返int test03()&#123;\tcout &lt;&lt; &quot;this is test03 &quot; &lt;&lt; endl;\treturn 10;&#125;//4、有参有返int test04(int a, int b)&#123;\tcout &lt;&lt; &quot;this is test04 &quot; &lt;&lt; endl;\tint sum = a + b;\treturn sum;&#125;\n</code></pre>\n<h3 id=\"66-函数的声明\"><a class=\"anchor\" href=\"#66-函数的声明\">#</a> 6.6 函数的声明</h3>\n<p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>\n<ul>\n<li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//声明可以多次，定义只能一次//声明int max(int a, int b);int max(int a, int b);//定义int max(int a, int b)&#123;\treturn a &gt; b ? a : b;&#125;int main() &#123;\tint a = 100;\tint b = 200;\tcout &lt;&lt; max(a, b) &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<h3 id=\"67-函数的分文件编写\"><a class=\"anchor\" href=\"#67-函数的分文件编写\">#</a> 6.7 函数的分文件编写</h3>\n<p>** 作用：** 让代码结构更加清晰</p>\n<p>函数分文件编写一般有 4 个步骤</p>\n<ol>\n<li>创建后缀名为.h 的头文件</li>\n<li>创建后缀名为.cpp 的源文件</li>\n<li>在头文件中写函数的声明</li>\n<li>在源文件中写函数的定义</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//swap.h文件#include&lt;iostream&gt;using namespace std;//实现两个数字交换的函数声明void swap(int a, int b);\n</code></pre>\n<pre><code class=\"language-C++\">//swap.cpp文件#include &quot;swap.h&quot;void swap(int a, int b)&#123;\tint temp = a;\ta = b;\tb = temp;\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;&#125;\n</code></pre>\n<pre><code class=\"language-C++\">//main函数文件#include &quot;swap.h&quot;int main() &#123;\tint a = 100;\tint b = 200;\tswap(a, b);\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<h2 id=\"7-指针\"><a class=\"anchor\" href=\"#7-指针\">#</a> 7 指针</h2>\n<h3 id=\"71-指针的基本概念\"><a class=\"anchor\" href=\"#71-指针的基本概念\">#</a> 7.1 指针的基本概念</h3>\n<p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>\n<ul>\n<li>\n<p>内存编号是从 0 开始记录的，一般用十六进制数字表示</p>\n</li>\n<li>\n<p>可以利用指针变量保存地址</p>\n</li>\n</ul>\n<h3 id=\"72-指针变量的定义和使用\"><a class=\"anchor\" href=\"#72-指针变量的定义和使用\">#</a> 7.2 指针变量的定义和使用</h3>\n<p>指针变量定义语法：  <code>数据类型 * 变量名；</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\t//1、指针的定义\tint a = 10; //定义整型变量a\t\t//指针定义语法： 数据类型 * 变量名 ;\tint * p;\t//指针变量赋值\tp = &amp;a; //指针指向变量a的地址\tcout &lt;&lt; &amp;a &lt;&lt; endl; //打印数据a的地址\tcout &lt;&lt; p &lt;&lt; endl;  //打印指针变量p\t//2、指针的使用\t//通过*操作指针变量指向的内存\tcout &lt;&lt; &quot;*p = &quot; &lt;&lt; *p &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<p>指针变量和普通变量的区别</p>\n<ul>\n<li>普通变量存放的是数据，指针变量存放的是地址</li>\n<li>指针变量可以通过 &quot;*&quot; 操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>\n</ul>\n<blockquote>\n<p>总结 1： 我们可以通过 &amp; 符号 获取变量的地址</p>\n</blockquote>\n<blockquote>\n<p>总结 2：利用指针可以记录地址</p>\n</blockquote>\n<blockquote>\n<p>总结 3：对指针变量解引用，可以操作指针指向的内存</p>\n</blockquote>\n<h3 id=\"73-指针所占内存空间\"><a class=\"anchor\" href=\"#73-指针所占内存空间\">#</a> 7.3 指针所占内存空间</h3>\n<p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\tint a = 10;\tint * p;\tp = &amp;a; //指针指向数据a的地址\tcout &lt;&lt; *p &lt;&lt; endl; //* 解引用\tcout &lt;&lt; sizeof(p) &lt;&lt; endl;\tcout &lt;&lt; sizeof(char *) &lt;&lt; endl;\tcout &lt;&lt; sizeof(float *) &lt;&lt; endl;\tcout &lt;&lt; sizeof(double *) &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结：所有指针类型在 32 位操作系统下是 4 个字节</p>\n</blockquote>\n<h3 id=\"74-空指针和野指针\"><a class=\"anchor\" href=\"#74-空指针和野指针\">#</a> 7.4 空指针和野指针</h3>\n<p><strong>空指针</strong>：指针变量指向内存中编号为 0 的空间</p>\n<p>** 用途：** 初始化指针变量</p>\n<p>** 注意：** 空指针指向的内存是不可以访问的</p>\n<p><strong>示例 1：空指针</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\t//指针变量p指向内存地址编号为0的空间\tint * p = NULL;\t//访问空指针报错 \t//内存编号0 ~255为系统占用内存，不允许用户访问\tcout &lt;&lt; *p &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>\n<p><strong>示例 2：野指针</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\t//指针变量p指向内存地址编号为0x1100的空间\tint * p = (int *)0x1100;\t//访问野指针报错 \tcout &lt;&lt; *p &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>\n</blockquote>\n<h3 id=\"75-const修饰指针\"><a class=\"anchor\" href=\"#75-const修饰指针\">#</a> 7.5 const 修饰指针</h3>\n<p>const 修饰指针有三种情况</p>\n<ol>\n<li>const 修饰指针   --- 常量指针</li>\n<li>const 修饰常量   --- 指针常量</li>\n<li>const 即修饰指针，又修饰常量</li>\n</ol>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">int main() &#123;\tint a = 10;\tint b = 10;\t//const修饰的是指针，指针指向可以改，指针指向的值不可以更改\tconst int * p1 = &amp;a; \tp1 = &amp;b; //正确\t//*p1 = 100;  报错\t\t//const修饰的是常量，指针指向不可以改，指针指向的值可以更改\tint * const p2 = &amp;a;\t//p2 = &amp;b; //错误\t*p2 = 100; //正确    //const既修饰指针又修饰常量\tconst int * const p3 = &amp;a;\t//p3 = &amp;b; //错误\t//*p3 = 100; //错误\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>技巧：看 const 右侧紧跟着的是指针还是常量，是指针就是常量指针，是常量就是指针常量</p>\n</blockquote>\n<h3 id=\"76-指针和数组\"><a class=\"anchor\" href=\"#76-指针和数组\">#</a> 7.6 指针和数组</h3>\n<p>** 作用：** 利用指针访问数组中元素</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">int main() &#123;\tint arr[] = &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;\tint * p = arr;  //指向数组的指针\tcout &lt;&lt; &quot;第一个元素： &quot; &lt;&lt; arr[0] &lt;&lt; endl;\tcout &lt;&lt; &quot;指针访问第一个元素： &quot; &lt;&lt; *p &lt;&lt; endl;\tfor (int i = 0; i &lt; 10; i++)\t&#123;\t\t//利用指针遍历数组\t\tcout &lt;&lt; *p &lt;&lt; endl;\t\tp++;\t&#125;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<h3 id=\"77-指针和函数\"><a class=\"anchor\" href=\"#77-指针和函数\">#</a> 7.7 指针和函数</h3>\n<p>** 作用：** 利用指针作函数参数，可以修改实参的值</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//值传递void swap1(int a ,int b)&#123;\tint temp = a;\ta = b; \tb = temp;&#125;//地址传递void swap2(int * p1, int *p2)&#123;\tint temp = *p1;\t*p1 = *p2;\t*p2 = temp;&#125;int main() &#123;\tint a = 10;\tint b = 20;\tswap1(a, b); // 值传递不会改变实参\tswap2(&amp;a, &amp;b); //地址传递会改变实参\tcout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;\tcout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>\n</blockquote>\n<h3 id=\"78-指针-数组-函数\"><a class=\"anchor\" href=\"#78-指针-数组-函数\">#</a> 7.8 指针、数组、函数</h3>\n<p>** 案例描述：** 封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>\n<p>例如数组：int arr [10] = { 4,3,6,9,1,2,10,8,7,5 };</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-c++\">//冒泡排序函数void bubbleSort(int * arr, int len)  //int * arr 也可以写为int arr[]&#123;\tfor (int i = 0; i &lt; len - 1; i++)\t&#123;\t\tfor (int j = 0; j &lt; len - 1 - i; j++)\t\t&#123;\t\t\tif (arr[j] &gt; arr[j + 1])\t\t\t&#123;\t\t\t\tint temp = arr[j];\t\t\t\tarr[j] = arr[j + 1];\t\t\t\tarr[j + 1] = temp;\t\t\t&#125;\t\t&#125;\t&#125;&#125;//打印数组函数void printArray(int arr[], int len)&#123;\tfor (int i = 0; i &lt; len; i++)\t&#123;\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;\t&#125;&#125;int main() &#123;\tint arr[10] = &#123; 4,3,6,9,1,2,10,8,7,5 &#125;;\tint len = sizeof(arr) / sizeof(int);\tbubbleSort(arr, len);\tprintArray(arr, len);\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>\n</blockquote>\n<h2 id=\"8-结构体\"><a class=\"anchor\" href=\"#8-结构体\">#</a> 8 结构体</h2>\n<h3 id=\"81-结构体基本概念\"><a class=\"anchor\" href=\"#81-结构体基本概念\">#</a> 8.1 结构体基本概念</h3>\n<p>结构体属于用户<mark>自定义的数据类型</mark>，允许用户存储不同的数据类型</p>\n<h3 id=\"82-结构体定义和使用\"><a class=\"anchor\" href=\"#82-结构体定义和使用\">#</a> 8.2 结构体定义和使用</h3>\n<p><strong>语法：</strong> <code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>\n<p>通过结构体创建变量的方式有三种：</p>\n<ul>\n<li>struct 结构体名 变量名</li>\n<li 成员1值=\"\" ，=\"\" 成员2值...=\"\">struct 结构体名 变量名 =</li>\n<li>定义结构体时顺便创建变量</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//结构体定义struct student&#123;\t//成员列表\tstring name;  //姓名\tint age;      //年龄\tint score;    //分数&#125;stu3; //结构体变量创建方式3 int main() &#123;\t//结构体变量创建方式1\tstruct student stu1; //struct 关键字可以省略\tstu1.name = &quot;张三&quot;;\tstu1.age = 18;\tstu1.score = 100;\t\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu1.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu1.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu1.score &lt;&lt; endl;\t//结构体变量创建方式2\tstruct student stu2 = &#123; &quot;李四&quot;,19,60 &#125;;\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu2.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu2.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu2.score &lt;&lt; endl;\tstu3.name = &quot;王五&quot;;\tstu3.age = 18;\tstu3.score = 80;\t\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu3.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu3.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu3.score &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结 1：定义结构体时的关键字是 struct，不可省略</p>\n</blockquote>\n<blockquote>\n<p>总结 2：创建结构体变量时，关键字 struct 可以省略</p>\n</blockquote>\n<blockquote>\n<p>总结 3：结构体变量利用操作符 ''.''  访问成员</p>\n</blockquote>\n<h3 id=\"83-结构体数组\"><a class=\"anchor\" href=\"#83-结构体数组\">#</a> 8.3 结构体数组</h3>\n<p>** 作用：** 将自定义的结构体放入到数组中方便维护</p>\n<p><strong>语法：</strong> <code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//结构体定义struct student&#123;\t//成员列表\tstring name;  //姓名\tint age;      //年龄\tint score;    //分数&#125;int main() &#123;\t\t//结构体数组\tstruct student arr[3]=\t&#123;\t\t&#123;&quot;张三&quot;,18,80 &#125;,\t\t&#123;&quot;李四&quot;,19,60 &#125;,\t\t&#123;&quot;王五&quot;,20,70 &#125;\t&#125;;\tfor (int i = 0; i &lt; 3; i++)\t&#123;\t\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; arr[i].age &lt;&lt; &quot; 分数：&quot; &lt;&lt; arr[i].score &lt;&lt; endl;\t&#125;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<h3 id=\"84-结构体指针\"><a class=\"anchor\" href=\"#84-结构体指针\">#</a> 8.4 结构体指针</h3>\n<p>** 作用：** 通过指针访问结构体中的成员</p>\n<ul>\n<li>利用操作符  <code>-&gt; </code> 可以通过结构体指针访问结构体属性</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//结构体定义struct student&#123;\t//成员列表\tstring name;  //姓名\tint age;      //年龄\tint score;    //分数&#125;;int main() &#123;\t\tstruct student stu = &#123; &quot;张三&quot;,18,100, &#125;;\t\tstruct student * p = &amp;stu;\t\tp-&gt;score = 80; //指针通过 -&gt; 操作符可以访问成员\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; p-&gt;score &lt;&lt; endl;\t\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>\n</blockquote>\n<h3 id=\"85-结构体嵌套结构体\"><a class=\"anchor\" href=\"#85-结构体嵌套结构体\">#</a> 8.5 结构体嵌套结构体</h3>\n<p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>\n<p>** 例如：** 每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//学生结构体定义struct student&#123;\t//成员列表\tstring name;  //姓名\tint age;      //年龄\tint score;    //分数&#125;;//教师结构体定义struct teacher&#123;    //成员列表\tint id; //职工编号\tstring name;  //教师姓名\tint age;   //教师年龄\tstruct student stu; //子结构体 学生&#125;;int main() &#123;\tstruct teacher t1;\tt1.id = 10000;\tt1.name = &quot;老王&quot;;\tt1.age = 40;\tt1.stu.name = &quot;张三&quot;;\tt1.stu.age = 18;\tt1.stu.score = 100;\tcout &lt;&lt; &quot;教师 职工编号： &quot; &lt;&lt; t1.id &lt;&lt; &quot; 姓名： &quot; &lt;&lt; t1.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; t1.age &lt;&lt; endl;\t\tcout &lt;&lt; &quot;辅导学员 姓名： &quot; &lt;&lt; t1.stu.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; t1.stu.age &lt;&lt; &quot; 考试分数： &quot; &lt;&lt; t1.stu.score &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<p>** 总结：** 在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>\n<h3 id=\"86-结构体做函数参数\"><a class=\"anchor\" href=\"#86-结构体做函数参数\">#</a> 8.6 结构体做函数参数</h3>\n<p>** 作用：** 将结构体作为参数向函数中传递</p>\n<p>传递方式有两种：</p>\n<ul>\n<li>值传递</li>\n<li>地址传递</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//学生结构体定义struct student&#123;\t//成员列表\tstring name;  //姓名\tint age;      //年龄\tint score;    //分数&#125;;//值传递void printStudent(student stu )&#123;\tstu.age = 28;\tcout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;&#125;//地址传递void printStudent2(student *stu)&#123;\tstu-&gt;age = 28;\tcout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu-&gt;age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;&#125;int main() &#123;\tstudent stu = &#123; &quot;张三&quot;,18,100&#125;;\t//值传递\tprintStudent(stu);\tcout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;\tcout &lt;&lt; endl;\t//地址传递\tprintStudent2(&amp;stu);\tcout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<blockquote>\n<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>\n</blockquote>\n<h3 id=\"87-结构体中-const使用场景\"><a class=\"anchor\" href=\"#87-结构体中-const使用场景\">#</a> 8.7 结构体中 const 使用场景</h3>\n<p>** 作用：** 用 const 来防止误操作</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//学生结构体定义struct student&#123;\t//成员列表\tstring name;  //姓名\tint age;      //年龄\tint score;    //分数&#125;;//const使用场景void printStudent(const student *stu) //加const防止函数体中的误操作&#123;\t//stu-&gt;age = 100; //操作失败，因为加了const修饰\tcout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;&#125;int main() &#123;\tstudent stu = &#123; &quot;张三&quot;,18,100 &#125;;\tprintStudent(&amp;stu);\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<h3 id=\"88-结构体案例\"><a class=\"anchor\" href=\"#88-结构体案例\">#</a> 8.8 结构体案例</h3>\n<h4 id=\"881-案例1\"><a class=\"anchor\" href=\"#881-案例1\">#</a> 8.8.1 案例 1</h4>\n<p><strong>案例描述：</strong></p>\n<p>学校正在做毕设项目，每名老师带领 5 个学生，总共有 3 名老师，需求如下</p>\n<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放 5 名学生的数组作为成员</p>\n<p>学生的成员有姓名、考试分数，创建数组存放 3 名老师，通过函数给每个老师及所带的学生赋值</p>\n<p>最终打印出老师数据以及老师所带的学生数据。</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">struct Student&#123;\tstring name;\tint score;&#125;;struct Teacher&#123;\tstring name;\tStudent sArray[5];&#125;;void allocateSpace(Teacher tArray[] , int len)&#123;\tstring tName = &quot;教师&quot;;\tstring sName = &quot;学生&quot;;\tstring nameSeed = &quot;ABCDE&quot;;\tfor (int i = 0; i &lt; len; i++)\t&#123;\t\ttArray[i].name = tName + nameSeed[i];\t\t\t\tfor (int j = 0; j &lt; 5; j++)\t\t&#123;\t\t\ttArray[i].sArray[j].name = sName + nameSeed[j];\t\t\ttArray[i].sArray[j].score = rand() % 61 + 40;\t\t&#125;\t&#125;&#125;void printTeachers(Teacher tArray[], int len)&#123;\tfor (int i = 0; i &lt; len; i++)\t&#123;\t\tcout &lt;&lt; tArray[i].name &lt;&lt; endl;\t\tfor (int j = 0; j &lt; 5; j++)\t\t&#123;\t\t\tcout &lt;&lt; &quot;\\t姓名：&quot; &lt;&lt; tArray[i].sArray[j].name &lt;&lt; &quot; 分数：&quot; &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;\t\t&#125;\t&#125;&#125;int main() &#123;\tsrand((unsigned int)time(NULL)); //随机数种子 头文件 #include &lt;ctime&gt;\tTeacher tArray[3]; //老师数组\tint len = sizeof(tArray) / sizeof(Teacher);\tallocateSpace(tArray, len); //创建数据\tprintTeachers(tArray, len); //打印数据\t\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n<h4 id=\"882-案例2\"><a class=\"anchor\" href=\"#882-案例2\">#</a> 8.8.2 案例 2</h4>\n<p><strong>案例描述：</strong></p>\n<p>设计一个英雄的结构体，包括成员姓名，年龄，性别；创建结构体数组，数组中存放 5 名英雄。</p>\n<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>\n<p>五名英雄信息如下：</p>\n<pre><code class=\"language-C++\">\t\t&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,\t\t&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,\t\t&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,\t\t&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,\t\t&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,\n</code></pre>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-C++\">//英雄结构体struct hero&#123;\tstring name;\tint age;\tstring sex;&#125;;//冒泡排序void bubbleSort(hero arr[] , int len)&#123;\tfor (int i = 0; i &lt; len - 1; i++)\t&#123;\t\tfor (int j = 0; j &lt; len - 1 - i; j++)\t\t&#123;\t\t\tif (arr[j].age &gt; arr[j + 1].age)\t\t\t&#123;\t\t\t\thero temp = arr[j];\t\t\t\tarr[j] = arr[j + 1];\t\t\t\tarr[j + 1] = temp;\t\t\t&#125;\t\t&#125;\t&#125;&#125;//打印数组void printHeros(hero arr[], int len)&#123;\tfor (int i = 0; i &lt; len; i++)\t&#123;\t\tcout &lt;&lt; &quot;姓名： &quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 性别： &quot; &lt;&lt; arr[i].sex &lt;&lt; &quot; 年龄： &quot; &lt;&lt; arr[i].age &lt;&lt; endl;\t&#125;&#125;int main() &#123;\tstruct hero arr[5] =\t&#123;\t\t&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,\t\t&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,\t\t&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,\t\t&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,\t\t&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,\t&#125;;\tint len = sizeof(arr) / sizeof(hero); //获取数组元素个数\tbubbleSort(arr, len); //排序\tprintHeros(arr, len); //打印\tsystem(&quot;pause&quot;);\treturn 0;&#125;\n</code></pre>\n",
            "tags": [
                "编程基础",
                "C++"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/",
            "url": "https://zengshengli775.gitee.io/2021/08/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/",
            "title": "数据结构与算法基础",
            "date_published": "2021-08-25T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "数据结构与算法",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/",
            "url": "https://zengshengli775.gitee.io/2021/08/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/",
            "title": "深度学习基础",
            "date_published": "2021-08-25T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "深度学习",
                "深度学习"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/",
            "url": "https://zengshengli775.gitee.io/2021/08/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/",
            "title": "机器学习基础",
            "date_published": "2021-08-25T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "机器学习",
                "机器学习"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/26/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/PS4%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/",
            "url": "https://zengshengli775.gitee.io/2021/08/26/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/PS4%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/",
            "title": "PS4代理上网",
            "date_published": "2021-08-25T16:00:00.000Z",
            "content_html": "<h2 id=\"ps4代理上网\"><a class=\"anchor\" href=\"#ps4代理上网\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbWFpbG5jdWVkdWNuLW15LnNoYXJlcG9pbnQuY29tLzp0Oi9nL3BlcnNvbmFsLzYxMDgxMTkwOTRfZW1haWxfbmN1X2VkdV9jbi9FVUpzc0JPV1pwZElnUWxEVDQ0eFZYUUJjVzZxT1pHcFdpanBJYlFLeDh0NXZBP2U9NEx2MFY3\">PS4 代理上网</span></h2>\n<p>gitee 净网，有敏感字，无法部署，请转至<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbWFpbG5jdWVkdWNuLW15LnNoYXJlcG9pbnQuY29tLzp0Oi9nL3BlcnNvbmFsLzYxMDgxMTkwOTRfZW1haWxfbmN1X2VkdV9jbi9FVUpzc0JPV1pwZElnUWxEVDQ0eFZYUUJjVzZxT1pHcFdpanBJYlFLeDh0NXZBP2U9NEx2MFY3\"> onedriver</span> 下载浏览。</p>\n",
            "tags": [
                "实用技巧",
                "PS4"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/25/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/Mac%20VScode%E5%BF%AB%E6%8D%B7%E9%94%AE/",
            "url": "https://zengshengli775.gitee.io/2021/08/25/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/Mac%20VScode%E5%BF%AB%E6%8D%B7%E9%94%AE/",
            "title": "Mac VScode快捷键",
            "date_published": "2021-08-24T16:00:00.000Z",
            "content_html": "<h2 id=\"全局\"><a class=\"anchor\" href=\"#全局\">#</a> 全局</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Command + Shift + P &#x2F; F1 显示命令面板</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + P 快速打开</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + Shift + N 打开新窗口</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + W 关闭窗口</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Command + Option + Esc 强制退出软件</pre></td></tr></table></figure><h2 id=\"基本\"><a class=\"anchor\" href=\"#基本\">#</a> 基本</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Command + X 剪切（未选中文本的情况下，剪切光标所在行）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + C 复制（未选中文本的情况下，复制光标所在行）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Option + Up 向上移动行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Option + Down 向下移动行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Option + Shift + Up 向上复制行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Option + Shift + Down 向下复制行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Command + Shift + K 删除行</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Command + Enter 下一行插入</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Command + Shift + Enter 上一行插入</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Command + Shift + \\ 跳转到匹配的括号</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Command + [ 减少缩进</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Command + ] 增加缩进</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Home 跳转至行首</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>End 跳转到行尾</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Command + Up 跳转至文件开头</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Command + Down 跳转至文件结尾</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Ctrl + PgUp 按行向上滚动</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Ctrl + PgDown 按行向下滚动</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Command + PgUp 按屏向上滚动</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Command + PgDown 按屏向下滚动</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Command + Shift + [ 折叠代码块</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Command + Shift + ] 展开代码块</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Command + K Command + [ 折叠全部子代码块</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Command + K Command + ] 展开全部子代码块</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Command + K Command + 0 折叠全部代码块</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Command + K Command + J 展开全部代码块</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Command + K Command + C 添加行注释</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Command + K Command + U 移除行注释</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Command + &#x2F; 添加、移除行注释</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Option + Shift + A 添加、移除块注释</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Option + Z 自动换行、取消自动换行</pre></td></tr></table></figure><h2 id=\"多光标与选择\"><a class=\"anchor\" href=\"#多光标与选择\">#</a> 多光标与选择</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Option + 点击 插入多个光标</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + Option + Up 向上插入光标</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + Option + Down 向下插入光标</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + U 撤销上一个光标操作</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Option + Shift + I 在所选行的行尾插入光标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Command + I 选中当前行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Command + Shift + L 选中所有与当前选中内容相同部分</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Command + F2 选中所有与当前选中单词相同的单词</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Command + Ctrl + Shift + Left 折叠选中</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Command + Ctrl + Shift + Right 展开选中</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Alt + Shift + 拖动鼠标 选中代码块</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Command + Shift + Option + Up 列选择 向上</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Command + Shift + Option + Down 列选择 向下</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Command + Shift + Option + Left 列选择 向左</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Command + Shift + Option + Right 列选择 向右</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Command + Shift + Option + PgUp 列选择 向上翻页</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Command + Shift + Option + PgDown 列选择 向下翻页</pre></td></tr></table></figure><h2 id=\"查找替换\"><a class=\"anchor\" href=\"#查找替换\">#</a> 查找替换</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Command + F 查找</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + Option + F 替换</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + G 查找下一个</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + Shift + G 查找上一个</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Option + Enter 选中所有匹配项</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Command + D 向下选中相同内容</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Command + K Command + D 移除前一个向下选中相同内容</pre></td></tr></table></figure><h2 id=\"进阶\"><a class=\"anchor\" href=\"#进阶\">#</a> 进阶</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Ctrl + Space 打开建议</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + Shift + Space 参数提示</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Tab Emmet 插件缩写补全</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Option + Shift + F 格式化</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Command + K Command + F 格式化选中内容</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>F12 跳转到声明位置</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Option + F12 查看具体声明内容</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Command + K F12 分屏查看具体声明内容</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Command + . 快速修复</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Shift + F12 显示引用</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>F2 重命名符号</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Command + Shift + . 替换为上一个值</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Command + Shift + , 替换为下一个值</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Command + K Command + X 删除行尾多余空格</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Command + K M 更改文件语言</pre></td></tr></table></figure><h2 id=\"导航\"><a class=\"anchor\" href=\"#导航\">#</a> 导航</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Command + T 显示所有符号</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Ctrl + G 跳转至某行</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + P 跳转到某个文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + Shift + O 跳转到某个符号</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Command + Shift + M 打开问题面板</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>F8 下一个错误或警告位置</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Shift + F8 上一个错误或警告位置</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Ctrl + Shift + Tab 编辑器历史记录</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Ctrl + - 后退</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Ctrl + Shift + - 前进</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Ctrl + Shift + M Tab 切换焦点</pre></td></tr></table></figure><h2 id=\"编辑器管理\"><a class=\"anchor\" href=\"#编辑器管理\">#</a> 编辑器管理</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Command + W 关闭编辑器</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + K F 关闭文件夹</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + \\ 编辑器分屏</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + 1 切换到第一分组</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Command + 2 切换到第二分组</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Command + 3 切换到第三分组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Command + K Command + Left 切换到上一分组</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Command + K Command + Right 切换到下一分组</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Command + K Command + Shift + Left 左移编辑器</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Command + K Command + Shift + Right 右移编辑器</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Command + K Left 激活左侧编辑组</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Command + K Right 激活右侧编辑组</pre></td></tr></table></figure><h2 id=\"文件管理\"><a class=\"anchor\" href=\"#文件管理\">#</a> 文件管理</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Command + N 新建文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + O 打开文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + S 保存文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + Shift + S 另存为</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Command + Option + S 全部保存</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Command + W 关闭</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Command + K Command + W 全部关闭</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Command + Shift + T 重新打开被关闭的编辑器</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Command + K Enter 保持打开</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Ctrl + Tab 打开下一个</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Ctrl + Shift + Tab 打开上一个</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Command + K P 复制当前文件路径</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Command + K R 在资源管理器中查看当前文件</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Command + K O 新窗口打开当前文件</pre></td></tr></table></figure><h2 id=\"显示\"><a class=\"anchor\" href=\"#显示\">#</a> 显示</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Command + Ctrl + F 全屏、退出全屏</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Command + Option + 1 切换编辑器分屏方式（横、竖）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + + 放大</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + - 缩小</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Command + B 显示、隐藏侧边栏</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Command + Shift + E 显示资源管理器 或 切换焦点</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Command + Shift + F 显示搜索框</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Ctrl + Shift + G 显示 Git 面板</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Command + Shift + D 显示调试面板</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Command + Shift + X 显示插件面板</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Command + Shift + H 全局搜索替换</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Command + Shift + J 显示、隐藏高级搜索</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Command + Shift + C 打开新终端</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Command + Shift + U 显示输出面板</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Command + Shift + V Markdown 预览窗口</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Command + K V 分屏显示 Markdown 预览窗口</pre></td></tr></table></figure><h2 id=\"调试\"><a class=\"anchor\" href=\"#调试\">#</a> 调试</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>F9 设置 或 取消断点</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>F5 开始 或 继续</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>F11 进入</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Shift + F11 跳出</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>F10 跳过</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Command + K Command + I 显示悬停信息</pre></td></tr></table></figure><h2 id=\"集成终端\"><a class=\"anchor\" href=\"#集成终端\">#</a> 集成终端</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Ctrl + &#96; 显示终端</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Ctrl + Shift + &#96; 新建终端</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command + Up 向上滚动</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Command + Down 向下滚动</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>PgUp 向上翻页</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>PgDown 向下翻页</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Command + Home 滚动到顶部</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Command + End 滚动到底部</pre></td></tr></table></figure>",
            "tags": [
                "实用技巧",
                "Mac"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/25/%E7%A7%91%E7%A0%94/%E7%A7%91%E7%A0%94%E6%96%87%E7%8C%AE%E7%BD%91%E7%AB%99/",
            "url": "https://zengshengli775.gitee.io/2021/08/25/%E7%A7%91%E7%A0%94/%E7%A7%91%E7%A0%94%E6%96%87%E7%8C%AE%E7%BD%91%E7%AB%99/",
            "title": "科研文献网站",
            "date_published": "2021-08-24T16:00:00.000Z",
            "content_html": "<h2 id=\"科研文献网站\"><a class=\"anchor\" href=\"#科研文献网站\">#</a> 科研文献网站</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3RvcmthcHAubWUvP3JlZj05MzYxNy0xMQ==\">文献鸟 Stork，您忠实的科研助手，追踪新文献</span></p>\n",
            "tags": [
                "科研",
                "科研文献网站"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/23/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/Chrome%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%AD%97%E5%B9%95/",
            "url": "https://zengshengli775.gitee.io/2021/08/23/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/Chrome%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%AD%97%E5%B9%95/",
            "title": "Chrome在线视频自动生成字幕",
            "date_published": "2021-08-22T16:00:00.000Z",
            "content_html": "<h2 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h2>\n<p>安装 Chrome 浏览器正式版最新版本，在地址栏输入：</p>\n<p>chrome://flags/#enable-accessibility-live-captions</p>\n<p>然后把 Default 选项更改为 Enabled。</p>\n<p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbly1gtqr2wnd36j60rt087q6s02.jpg\" alt=\"download.png\" /></p>\n<p>根据提示重启浏览器。</p>\n<p>再在浏览器的设置页面，点击高级 - 无障碍。</p>\n<p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbly1gtqr2wl8jzj609x08rjrv02.jpg\" alt=\"download-1.png\" /></p>\n<p>接着勾选开启为您的媒体生成字幕这个选项。接着勾选开启为您的媒体生成字幕这个选项。</p>\n<p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbly1gtqr2wnkfnj60mi04nt8o02.jpg\" alt=\"download.jpg\" /></p>\n<p>设置好以后，当你再次在网页里播放视频时，视频下方将会出现一个新的灰色工具栏，生成的字幕将会不断出现在灰色工具栏中。</p>\n",
            "tags": [
                "实用技巧",
                "字幕"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/19/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84*%E5%92%8C&%E7%AC%A6%E5%8F%B7/",
            "url": "https://zengshengli775.gitee.io/2021/08/19/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84*%E5%92%8C&%E7%AC%A6%E5%8F%B7/",
            "title": "C语言中的*和&符号",
            "date_published": "2021-08-18T16:00:00.000Z",
            "content_html": "<h2 id=\"c语言中的和符号\"><a class=\"anchor\" href=\"#c语言中的和符号\">#</a> C 语言中的 * 和 &amp; 符号</h2>\n<p>之前对 * 和 &amp; 符号一直理解的比较浅显。只知道：<br />\n*p 好像表示的是一个指针；<br />\n&amp;p 表示的是一个地址。<br />\n然而这次当遇到了下面这个情况的时候：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a；</pre></td></tr><tr class=\"marked\"><td data-num=\"3\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"4\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>“<span class=\"token operator\">%</span>d\\n”<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>“<span class=\"token operator\">%</span>d\\n”<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>“<span class=\"token operator\">%</span>d\\n”<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>“<span class=\"token operator\">%</span>d\\n”<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"8\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"9\"></td><td><pre>结果：</pre></td></tr><tr class=\"marked\"><td data-num=\"10\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr><tr class=\"marked\"><td data-num=\"11\"></td><td><pre><span class=\"token number\">6487620</span></pre></td></tr><tr class=\"marked\"><td data-num=\"12\"></td><td><pre><span class=\"token number\">6487620</span></pre></td></tr><tr class=\"marked\"><td data-num=\"13\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr></table></figure><p>一脸懵逼，为什么 &amp; a 和 * b 的值不是一样？这才发现自己其实一点都没有搞懂。</p>\n<p>经过学习后，总结出来：<br />\n<strong>变量 a 本质上代表一个存储单元</strong>。CPU 通过该存储单元的地址访问该存储单元中的数据。所以<strong> a 本来代表两个值：存储单元的地址和储单元中的数据</strong>。于是就有了二异性。为了消除这种二义性，C 语言规定 a 表示存储单元中的数据，&amp;a 表示存储单元的地址。<br />\na 存储单元中的数据可以是一个普通数值，也可以是另一个存储单元的地址，比如：a = &amp;b; 语句就是将 b 的存储单元的地址存入 a 存储单元中。C 语言规定<em> a 代表 a 中存储的地址对应的存储单元中的数据，也就是访问</em> a 就等于访问 b，于是 * a 提供了通过 a 访问 b 中的数据的手段。</p>\n<p><strong>a 表示 a 对应的存储单元中的数据。</strong><br />\n<strong>&amp;a 表示 a 对应的存储单元的地址。</strong><br />\n<em><em>“</em>a” 表示：首先，要求 a 对应的存储单元中的数据一定是另一个存储单元的地址。</em>*<br />\n<em><em> 于是，“</em>a” 表示另一个存储单元中的数据。</em>*<br />\n<strong> 当 a 声明的类型是 int 时</strong>，a 中存储的是一个整数数值，通过 a 可以访问（读取或修改）这个数值。<br />\n<strong>当 a 声明的类型是 int * 时</strong>，a 中存储的是一个存储单元的地址，而该存储单元中存储的数据是一个整数数值；通过 * a 可以访问（读取或修改）这个数值。a == &amp;*a 都是该存储单元的地址。<br />\n<strong>当 a 声明的类型是 int * * 时</strong>，a 中存储的是一个存储单元的地址，而该存储单元中存储的数据是另外一个存储单元的地址，另外这个存储单元中存储的是一个整数数值；通过 * * a 可以访问（读取或修改）这个数值。<br />\n…</p>\n<p>最后，在 C 语言里地址叫指针。还有，在 C 语言中的数组本质上其实也是指针，即：* a 等同于 a []。</p>\n<p>转载于：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxNTgzNjgxL2FydGljbGUvZGV0YWlscy83ODU3MjAwOQ==\">C 语言中的 * 和 &amp; 符号</span></p>\n",
            "tags": [
                "编程基础",
                "C"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/18/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "url": "https://zengshengli775.gitee.io/2021/08/18/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "title": "C语言基础知识",
            "date_published": "2021-08-17T16:00:00.000Z",
            "content_html": "<h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单行注释</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/* 单行注释 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> 多行注释</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> 多行注释</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> 多行注释</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<h4 id=\"基本类型它们是算术类型包括两种类型整数类型和浮点类型\"><a class=\"anchor\" href=\"#基本类型它们是算术类型包括两种类型整数类型和浮点类型\">#</a> 基本类型：它们是算术类型，包括两种类型：整数类型和浮点类型。</h4>\n<h5 id=\"整数类型\"><a class=\"anchor\" href=\"#整数类型\">#</a> 整数类型</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储大小</th>\n<th style=\"text-align:left\">值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">char</td>\n<td style=\"text-align:left\">1 字节</td>\n<td style=\"text-align:left\">-128 到 127 或 0 到 255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned char</td>\n<td style=\"text-align:left\">1 字节</td>\n<td style=\"text-align:left\">0 到 255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">signed char</td>\n<td style=\"text-align:left\">1 字节</td>\n<td style=\"text-align:left\">-128 到 127</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">2 或 4 字节</td>\n<td style=\"text-align:left\">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned int</td>\n<td style=\"text-align:left\">2 或 4 字节</td>\n<td style=\"text-align:left\">0 到 65,535 或 0 到 4,294,967,295</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">short</td>\n<td style=\"text-align:left\">2 字节</td>\n<td style=\"text-align:left\">-32,768 到 32,767</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned short</td>\n<td style=\"text-align:left\">2 字节</td>\n<td style=\"text-align:left\">0 到 65,535</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">-2,147,483,648 到 2,147,483,647</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">unsigned long</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">0 到 4,294,967,295</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"浮点类型\"><a class=\"anchor\" href=\"#浮点类型\">#</a> 浮点类型</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储大小</th>\n<th style=\"text-align:left\">值范围</th>\n<th style=\"text-align:left\">精度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">4 字节</td>\n<td style=\"text-align:left\">1.2E-38 到 3.4E+38</td>\n<td style=\"text-align:left\">6 位有效位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:left\">8 字节</td>\n<td style=\"text-align:left\">2.3E-308 到 1.7E+308</td>\n<td style=\"text-align:left\">15 位有效位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long double</td>\n<td style=\"text-align:left\">16 字节</td>\n<td style=\"text-align:left\">3.4E-4932 到 1.1E+4932</td>\n<td style=\"text-align:left\">19 位有效位</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"枚举类型它们也是算术类型被用来定义在程序中只能赋予其一定的离散整数值的变量\"><a class=\"anchor\" href=\"#枚举类型它们也是算术类型被用来定义在程序中只能赋予其一定的离散整数值的变量\">#</a> 枚举类型：它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</h4>\n<h4 id=\"void-类型类型说明符-void-表明没有可用的值\"><a class=\"anchor\" href=\"#void-类型类型说明符-void-表明没有可用的值\">#</a> void 类型：类型说明符 <em>void</em> 表明没有可用的值。</h4>\n<h5 id=\"void-类型\"><a class=\"anchor\" href=\"#void-类型\">#</a> void 类型</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">类型与描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>函数返回为空</strong> C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 <strong>void exit (int status);</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>函数参数为空</strong> C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 <strong>int rand(void);</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>指针指向 void</strong> 类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 <strong>void *malloc( size_t size );</strong> 返回指向 void 的指针，可以转换为任何数据类型。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"派生类型它们包括指针类型-数组类型-结构类型-共用体类型和函数类型\"><a class=\"anchor\" href=\"#派生类型它们包括指针类型-数组类型-结构类型-共用体类型和函数类型\">#</a> 派生类型：它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</h4>\n<h4 id=\"强制类型转换\"><a class=\"anchor\" href=\"#强制类型转换\">#</a> 强制类型转换</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> count <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">double</span> mean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   mean <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> sum <span class=\"token operator\">/</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 使用强制类型转换运算符把一个整数变量除以另一个整数变量，得到一个浮点数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value of mean : %f\\n\"</span><span class=\"token punctuation\">,</span> mean <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Value of mean <span class=\"token operator\">:</span> <span class=\"token number\">3.400000</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 强制类型转换运算符的优先级大于除法，因此 sum 的值首先被转换为 double 型，然后除以 count，得到一个类型为 double 的值。</span></pre></td></tr></table></figure><h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<p>变量定义：&lt;类型名称&gt; &lt; 变量名称 &gt;</p>\n<p>变量类型：<strong>char</strong></p>\n<p>​\t\t\t\t\t<strong>int</strong></p>\n<p>​\t\t\t\t\t<strong>float</strong></p>\n<p>​\t\t\t\t\t<strong>double</strong></p>\n<p>​\t\t\t\t\t <strong>void</strong></p>\n<h2 id=\"常量\"><a class=\"anchor\" href=\"#常量\">#</a> 常量</h2>\n<p>在 C 中，有两种简单的定义常量的方式：</p>\n<ol>\n<li>使用 <strong>#define</strong> 预处理器。</li>\n<li>使用 <strong>const</strong> 关键字。</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// #define 预处理器</span></pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// #define identifier value</span></pre></td></tr><tr class=\"marked\"><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr class=\"marked\"><td data-num=\"4\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LENGTH</span> <span class=\"token expression\"><span class=\"token number\">10</span>   </span></span></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIDTH</span>  <span class=\"token expression\"><span class=\"token number\">5</span></span></span></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NEWLINE</span> <span class=\"token string\">'\\n'</span></span></pre></td></tr><tr class=\"marked\"><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr class=\"marked\"><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr class=\"marked\"><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">int</span> area<span class=\"token punctuation\">;</span>  </pre></td></tr><tr class=\"marked\"><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr class=\"marked\"><td data-num=\"14\"></td><td><pre>   area <span class=\"token operator\">=</span> LENGTH <span class=\"token operator\">*</span> WIDTH<span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"15\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of area : %d\"</span><span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"16\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> NEWLINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr class=\"marked\"><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"20\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//const 关键字</span></pre></td></tr><tr class=\"marked\"><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// const type variable = value;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr class=\"marked\"><td data-num=\"24\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"27\"></td><td><pre>   <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span>  LENGTH <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span>  WIDTH  <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> NEWLINE <span class=\"token operator\">=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"30\"></td><td><pre>   <span class=\"token keyword\">int</span> area<span class=\"token punctuation\">;</span>  </pre></td></tr><tr class=\"marked\"><td data-num=\"31\"></td><td><pre>   </pre></td></tr><tr class=\"marked\"><td data-num=\"32\"></td><td><pre>   area <span class=\"token operator\">=</span> LENGTH <span class=\"token operator\">*</span> WIDTH<span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"33\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of area : %d\"</span><span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"34\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> NEWLINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"35\"></td><td><pre> </pre></td></tr><tr class=\"marked\"><td data-num=\"36\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"存储类\"><a class=\"anchor\" href=\"#存储类\">#</a> 存储类</h2>\n<p><strong>auto 是所有局部变量默认的存储类</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">int</span> mount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">auto</span> <span class=\"token keyword\">int</span> month<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">auto</span> 只能用在函数内，即 <span class=\"token keyword\">auto</span> 只能修饰局部变量</pre></td></tr></table></figure><p><strong>register 用于定义存储在寄存器中而不是 RAM 中的局部变量</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">register</span> <span class=\"token keyword\">int</span>  miles<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>不能对它应用一元的 <span class=\"token string\">'&amp;'</span> 运算符（因为它没有内存位置）</pre></td></tr></table></figure><p><strong>static 当使用 static 修饰局部变量可以在函数调用之间保持局部变量的值；当修饰全局变量时，会使变量的作用域限制在声明它的文件内</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/* 函数声明 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 全局变量 - static 是默认的 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/* 'thingy' 是 'func1' 的局部变量 - 只初始化一次</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * 每次调用函数 'func1' 'thingy' 值不会被重置。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> */</span>                </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> thingy<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  thingy<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" thingy 为 %d ， count 为 %d\\n\"</span><span class=\"token punctuation\">,</span> thingy<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>count 作为全局变量可以在函数内使用，thingy 使用 <span class=\"token keyword\">static</span> 修饰后，不会在每次调用时重置。</pre></td></tr></table></figure><p><strong>extern 用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的；是用来在另一个文件中声明一个全局变量或函数</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 第一个文件：main.c</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> count <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write_extern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   count <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token function\">write_extern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 第二个文件：support.c</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">write_extern</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count is %d\\n\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>第二个文件中的 <span class=\"token keyword\">extern</span> 关键字用于声明已经在第一个文件 main<span class=\"token punctuation\">.</span>c 中定义的 count。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>$ gcc main<span class=\"token punctuation\">.</span>c support<span class=\"token punctuation\">.</span>c</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>$ <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>a<span class=\"token punctuation\">.</span>out</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>count is <span class=\"token number\">5</span></pre></td></tr></table></figure><h2 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<p><strong>算术运算符</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ++a 和 a++ 结果的不同：a++ 返回 a 加 1 以前的值，++a 返回 a 加 1 以后的值。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a++=%d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"++a=%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=%d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>a<span class=\"token operator\">++</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>a<span class=\"token operator\">=</span><span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">++</span>a<span class=\"token operator\">=</span><span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a<span class=\"token operator\">=</span><span class=\"token number\">12</span></pre></td></tr></table></figure><p><strong>关系运算符</strong></p>\n<p><strong>逻辑运算符</strong></p>\n<p><strong>位运算符</strong></p>\n<p><strong>赋值运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">=</td>\n<td style=\"text-align:left\">简单的赋值运算符，把右边操作数的值赋给左边操作数</td>\n<td style=\"text-align:left\">C = A + B 将把 A + B 的值赋给 C</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+=</td>\n<td style=\"text-align:left\">加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td>\n<td style=\"text-align:left\">C += A 相当于 C = C + A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-=</td>\n<td style=\"text-align:left\">减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td>\n<td style=\"text-align:left\">C -= A 相当于 C = C - A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*=</td>\n<td style=\"text-align:left\">乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td>\n<td style=\"text-align:left\">C *= A 相当于 C = C * A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/=</td>\n<td style=\"text-align:left\">除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td>\n<td style=\"text-align:left\">C /= A 相当于 C = C / A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%=</td>\n<td style=\"text-align:left\">求模且赋值运算符，求两个操作数的模赋值给左边操作数</td>\n<td style=\"text-align:left\">C %= A 相当于 C = C % A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;&lt;=</td>\n<td style=\"text-align:left\">左移且赋值运算符</td>\n<td style=\"text-align:left\">C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;&gt;=</td>\n<td style=\"text-align:left\">右移且赋值运算符</td>\n<td style=\"text-align:left\">C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;=</td>\n<td style=\"text-align:left\">按位与且赋值运算符</td>\n<td style=\"text-align:left\">C &amp;= 2 等同于 C = C &amp; 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^=</td>\n<td style=\"text-align:left\">按位异或且赋值运算符</td>\n<td style=\"text-align:left\">C ^= 2 等同于 C = C ^ 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">|=</td>\n<td style=\"text-align:left\">按位或且赋值运算符</td>\n<td style=\"text-align:left\">C |= 2 等同于 C = C | 2</td>\n</tr>\n</tbody>\n</table>\n<p><strong>杂项运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">sizeof()</td>\n<td style=\"text-align:left\">给出某个类型或变量在内存中所占据的字节数。</td>\n<td style=\"text-align:left\">sizeof (a) 将返回 4，其中 a 是整数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;</td>\n<td style=\"text-align:left\">返回变量的地址。</td>\n<td style=\"text-align:left\">&amp;a; 将给出变量的实际地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">指向一个变量。</td>\n<td style=\"text-align:left\">*a; 将指向一个变量。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">? :</td>\n<td style=\"text-align:left\">条件表达式</td>\n<td style=\"text-align:left\">如果条件为真？则值为 X : 否则值为 Y</td>\n</tr>\n</tbody>\n</table>\n<p>详情可见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jcHJvZ3JhbW1pbmcvYy1vcGVyYXRvcnMuaHRtbA==\">运算符</span></p>\n<h2 id=\"判断\"><a class=\"anchor\" href=\"#判断\">#</a> 判断</h2>\n<h3 id=\"if-语句\"><a class=\"anchor\" href=\"#if-语句\">#</a> if 语句</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//if 语句的语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>boolean_expression<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">/* 如果布尔表达式为真将执行的语句 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"ifelse-语句\"><a class=\"anchor\" href=\"#ifelse-语句\">#</a> if...else 语句</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//if...else 语句的语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>boolean_expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">/* 如果布尔表达式为真将执行的语句 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">/* 如果布尔表达式为假将执行的语句 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 级联的 if-else if</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>boolean_expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  st1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>boolean_expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  st2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>boolean_expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  st3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  st4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token comment\">/* 局部变量定义 */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token comment\">/* 检查布尔条件 */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       <span class=\"token comment\">/* 如果条件为真，则输出下面的语句 */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 小于 20\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       <span class=\"token comment\">/* 如果条件为假，则输出下面的语句 */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 大于 20\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a 的值是 %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"switch-语句\"><a class=\"anchor\" href=\"#switch-语句\">#</a> switch 语句</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//switch 语句的语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">case</span> constant<span class=\"token operator\">-</span>expression  <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 可选的 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">case</span> constant<span class=\"token operator\">-</span>expression  <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 可选的 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* 您可以有任意数量的 case 语句 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> <span class=\"token comment\">/* 可选的 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t<strong>流程图</strong></p>\n<p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbly1gtnigzt8mpj608e0b9dfv02.jpg\" alt=\"流程图.jpg\" /></p>\n<h2 id=\"循环\"><a class=\"anchor\" href=\"#循环\">#</a> 循环</h2>\n<h3 id=\"循环类型\"><a class=\"anchor\" href=\"#循环类型\">#</a> 循环类型</h3>\n<p>​\t<strong>while 循环</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//while 循环的语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//statement (s) 可以是一个单独的语句，也可以是几个语句组成的代码块。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//condition 可以是任意的表达式，当为任意非零值时都为 true。当条件为 true 时执行循环。 当条件为 false 时，退出循环，程序流将继续执行紧接着循环的下一条语句。</span></pre></td></tr></table></figure><p>​\t<strong>for 循环</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//for 循环的语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> init<span class=\"token punctuation\">;</span> condition<span class=\"token punctuation\">;</span> increment <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//increment 语句允许您更新循环控制变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> fact <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tfact <span class=\"token operator\">*=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d! = %d \\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>fact<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbly1gtniqa5fukj30e80f30t6.jpg\" alt=\"流程图.jpg\" /></p>\n<p>​\t<strong>do...while 循环</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//do...while 循环的语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> condition <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 条件表达式出现在循环的尾部，所以循环中的 statement (s) 会在条件被测试之前至少执行一次。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 如果条件为真，控制流会跳转回上面的 do，然后重新执行循环中的 statement (s)。这个过程会不断重复，直到给定条件变为假为止。</span></pre></td></tr></table></figure><h3 id=\"循环控制语句\"><a class=\"anchor\" href=\"#循环控制语句\">#</a> 循环控制语句</h3>\n<p>​\t<strong>break</strong></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1. 当 break 语句出现在一个循环内时，会跳出循环。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>2. 它可用于终止 switch 语句中的一个 case。</pre></td></tr></table></figure><p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbly1gtnix22m2ij30fk09uq3l.jpg\" alt=\"c-break-statement-works.jpg\" /></p>\n<p>​\t<strong>continue</strong></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>continue 跳过循环的这一轮剩下的语句，进入下一轮。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>对于 for 循环，continue 语句执行后自增语句仍然会执行。对于 while 和 do...while 循环，continue 语句重新执行条件判断语句。</pre></td></tr></table></figure><p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbly1gtnizqdn60j30dw09fjrz.jpg\" alt=\"c-continue-statement-works.jpg\" /></p>\n<h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>返回类型 函数名<span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 函数头</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   函数体</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 函数返回两个数中较大的那个数 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">/* 局部变量声明 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> num2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      result <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      result <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> 函数名<span class=\"token punctuation\">(</span>参数表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 不能使用带值的 return</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 可以没有 return</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 调用的时候不能做返回值的赋值</span></pre></td></tr></table></figure><h2 id=\"输入输出\"><a class=\"anchor\" href=\"#输入输出\">#</a> 输入输出</h2>\n<p><strong>printf(&quot;%03d&quot;,out_time)</strong>;</p>\n<p>%03d 是用在 printf 或 scanf 函数中的格式符，用来以特定的格式输入和输出字符。</p>\n<p>% 是格式符的开始。</p>\n<p>d 表示有符号整数。</p>\n<p>3 表示最小输出 3 位数字。</p>\n<p>0 表示如果数字不足 3 位，在左边用 0 补成 3 位。</p>\n<p>如 printf (&quot;%03d&quot;, 1); 会打印出 001</p>\n<p><strong>printf(&quot;%.10f&quot;,out)</strong>;</p>\n<p>f 表示浮点数</p>\n<p>.10 表示输出 10 位</p>\n",
            "tags": [
                "编程基础",
                "C"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/14/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%94%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/",
            "url": "https://zengshengli775.gitee.io/2021/08/14/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%94%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/",
            "title": "考研流程记录",
            "date_published": "2021-08-13T16:00:00.000Z",
            "content_html": "<h2 id=\"考研资料\"><a class=\"anchor\" href=\"#考研资料\">#</a> 考研资料</h2>\n<h3 id=\"数学\"><a class=\"anchor\" href=\"#数学\">#</a> 数学</h3>\n<h4 id=\"高数\"><a class=\"anchor\" href=\"#高数\">#</a> 高数</h4>\n<h5 id=\"a高数基础\"><a class=\"anchor\" href=\"#a高数基础\">#</a> A. 高数基础</h5>\n<h6 id=\"1教材辅导\"><a class=\"anchor\" href=\"#1教材辅导\">#</a> 1. 教材辅导</h6>\n<p>《李永乐王式安复习全书》高数部分</p>\n<p>《汤家凤高等数学辅导讲义》+ 汤家凤基础班视频</p>\n<h6 id=\"2习题\"><a class=\"anchor\" href=\"#2习题\">#</a> 2. 习题</h6>\n<p>《张宇 1000 题》高数部分 + 刷题实战演练视频</p>\n<h5 id=\"b高数强化\"><a class=\"anchor\" href=\"#b高数强化\">#</a> B. 高数强化</h5>\n<h6 id=\"1教材辅导-2\"><a class=\"anchor\" href=\"#1教材辅导-2\">#</a> 1. 教材辅导</h6>\n<p>《张宇高数 18 讲》+ 张宇强化班视频</p>\n<h6 id=\"2习题-2\"><a class=\"anchor\" href=\"#2习题-2\">#</a> 2. 习题</h6>\n<p>二刷《张宇 1000 题》高数部分</p>\n<h4 id=\"线代\"><a class=\"anchor\" href=\"#线代\">#</a> 线代</h4>\n<h5 id=\"a线代基础\"><a class=\"anchor\" href=\"#a线代基础\">#</a> A. 线代基础</h5>\n<h6 id=\"1教材辅导-3\"><a class=\"anchor\" href=\"#1教材辅导-3\">#</a> 1. 教材辅导</h6>\n<p>《李永乐王式安复习全书》线代部分 + 李永乐基础班视频</p>\n<h6 id=\"2习题-3\"><a class=\"anchor\" href=\"#2习题-3\">#</a> 2. 习题</h6>\n<p>《张宇 1000 题》线代部分 + 刷题实战演练视频</p>\n<h5 id=\"b线代强化\"><a class=\"anchor\" href=\"#b线代强化\">#</a> B. 线代强化</h5>\n<h6 id=\"1教材辅导-4\"><a class=\"anchor\" href=\"#1教材辅导-4\">#</a> 1. 教材辅导</h6>\n<p>《张宇线代 9 讲》</p>\n<p>《李永乐线代辅导讲义》+ 李永乐强化班视频</p>\n<h6 id=\"2习题-4\"><a class=\"anchor\" href=\"#2习题-4\">#</a> 2. 习题</h6>\n<p>二刷《张宇 1000 题》线代部分</p>\n<h4 id=\"概率\"><a class=\"anchor\" href=\"#概率\">#</a> 概率</h4>\n<h5 id=\"a概率基础\"><a class=\"anchor\" href=\"#a概率基础\">#</a> A. 概率基础</h5>\n<h6 id=\"1教材辅导-5\"><a class=\"anchor\" href=\"#1教材辅导-5\">#</a> 1. 教材辅导</h6>\n<p>《李永乐王式安复习全书》概率部分 + 王式安基础班视频</p>\n<h6 id=\"2习题-5\"><a class=\"anchor\" href=\"#2习题-5\">#</a> 2. 习题</h6>\n<p>《张宇 1000 题》概率部分 + 刷题实战演练视频</p>\n<h5 id=\"b概率强化\"><a class=\"anchor\" href=\"#b概率强化\">#</a> B. 概率强化</h5>\n<h6 id=\"1教材辅导-6\"><a class=\"anchor\" href=\"#1教材辅导-6\">#</a> 1. 教材辅导</h6>\n<p>《张宇概率 9 讲》</p>\n<p>《王式安概率辅导讲义》+ 王式安强化班视频</p>\n<h6 id=\"2习题-6\"><a class=\"anchor\" href=\"#2习题-6\">#</a> 2. 习题</h6>\n<p>二刷《张宇 1000 题》概率部分</p>\n<h4 id=\"真题模拟题\"><a class=\"anchor\" href=\"#真题模拟题\">#</a> 真题模拟题</h4>\n<p>《张宇考研数学真题大全解》+ 真题精讲视频</p>\n<p>《张宇八套卷》+ 重要题目讲解视频</p>\n<h3 id=\"英语\"><a class=\"anchor\" href=\"#英语\">#</a> 英语</h3>\n<h4 id=\"1单词\"><a class=\"anchor\" href=\"#1单词\">#</a> 1. 单词</h4>\n<p>《恋练有词》</p>\n<h4 id=\"2长难句\"><a class=\"anchor\" href=\"#2长难句\">#</a> 2. 长难句</h4>\n<p>考研核心语法视频</p>\n<h4 id=\"3阅读\"><a class=\"anchor\" href=\"#3阅读\">#</a> 3. 阅读</h4>\n<p>唐迟《考研英语阅读的逻辑》+ 阅读逻辑视频</p>\n<h4 id=\"4写作\"><a class=\"anchor\" href=\"#4写作\">#</a> 4. 写作</h4>\n<p>王江涛《考研英语高分写作》+ 写作带背营视频 + 写作基础视频</p>\n<h4 id=\"5真题\"><a class=\"anchor\" href=\"#5真题\">#</a> 5. 真题</h4>\n<p>《张剑黄皮书历年考研》+ 阅读强化提升班视频</p>\n<h3 id=\"政治\"><a class=\"anchor\" href=\"#政治\">#</a> 政治</h3>\n<h4 id=\"1视频\"><a class=\"anchor\" href=\"#1视频\">#</a> 1. 视频</h4>\n<p>徐涛《核心考案》+ 强化班视频</p>\n<h4 id=\"2辅导书习题\"><a class=\"anchor\" href=\"#2辅导书习题\">#</a> 2. 辅导书 + 习题</h4>\n<p>肖秀荣《1000 题》</p>\n<p>肖秀荣《知识点精讲精练》</p>\n<p>肖秀荣《命题冲刺 8 套卷》必背大题</p>\n<p>肖秀荣《命题终极预测 4 套卷》必背大题</p>\n<h3 id=\"专业课408\"><a class=\"anchor\" href=\"#专业课408\">#</a> 专业课 408</h3>\n<h4 id=\"1教材辅导-7\"><a class=\"anchor\" href=\"#1教材辅导-7\">#</a> 1. 教材辅导</h4>\n<p>” 四本课本 “</p>\n<p>天勤《数据结构》+ 强化视频</p>\n<p>《王道数据结构》习题</p>\n<p>《王道计组》+ 强化视频</p>\n<p>《王道计网》+ 强化视频</p>\n<p>《王道操作系统》+ 强化视频</p>\n<h4 id=\"2真题\"><a class=\"anchor\" href=\"#2真题\">#</a> 2. 真题</h4>\n<p>王道《历年真题解析》+ 历年真题视频</p>\n<h4 id=\"3模拟题\"><a class=\"anchor\" href=\"#3模拟题\">#</a> 3. 模拟题</h4>\n<p>王道《模拟题》+ 模拟题视频</p>\n<h4 id=\"4机试\"><a class=\"anchor\" href=\"#4机试\">#</a> 4. 机试</h4>\n<p>《算法笔记》+PAT 甲级考试</p>\n<p>王道《机试指南》+ 复试机试视频</p>\n<h2 id=\"考研规划\"><a class=\"anchor\" href=\"#考研规划\">#</a> 考研规划</h2>\n<h3 id=\"数学-2\"><a class=\"anchor\" href=\"#数学-2\">#</a> 数学</h3>\n<h4 id=\"1基础阶段\"><a class=\"anchor\" href=\"#1基础阶段\">#</a> 1. 基础阶段</h4>\n<h5 id=\"1月-3月\"><a class=\"anchor\" href=\"#1月-3月\">#</a> 1 月 - 3 月</h5>\n<p>高数：《李永乐王式安复习全书》高数部分、《汤家凤高等数学辅导讲义》+ 汤家凤基础班视频、《张宇 1000 题》高数部分 + 刷题实战演练视频</p>\n<h5 id=\"4月\"><a class=\"anchor\" href=\"#4月\">#</a> 4 月</h5>\n<p>线代：《李永乐王式安复习全书》线代部分 + 李永乐基础班视频、《张宇 1000 题》线代部分 + 刷题实战演练视频</p>\n<h5 id=\"5月\"><a class=\"anchor\" href=\"#5月\">#</a> 5 月</h5>\n<p>概率论：《李永乐王式安复习全书》概率部分 + 王式安基础班视频、《张宇 1000 题》概率部分 + 刷题实战演练视频</p>\n<h4 id=\"2强化阶段\"><a class=\"anchor\" href=\"#2强化阶段\">#</a> 2. 强化阶段</h4>\n<h5 id=\"7月-8月15日\"><a class=\"anchor\" href=\"#7月-8月15日\">#</a> 7 月 - 8 月 15 日</h5>\n<p>高数：《张宇高数 18 讲》+ 张宇强化班视频、二刷《张宇 1000 题》高数部分</p>\n<h5 id=\"8月15日-9月10日\"><a class=\"anchor\" href=\"#8月15日-9月10日\">#</a> 8 月 15 日 - 9 月 10 日</h5>\n<p>线代：《张宇线代 9 讲》、《李永乐线代辅导讲义》+ 李永乐强化班视频、二刷《张宇 1000 题》线代部分</p>\n<h5 id=\"9月10日-9月31日\"><a class=\"anchor\" href=\"#9月10日-9月31日\">#</a> 9 月 10 日 - 9 月 31 日</h5>\n<p>概率：《张宇概率 9 讲》、《王式安概率辅导讲义》+ 王式安强化班视频、二刷《张宇 1000 题》概率部分</p>\n<h4 id=\"3冲刺阶段\"><a class=\"anchor\" href=\"#3冲刺阶段\">#</a> 3. 冲刺阶段</h4>\n<h5 id=\"10月-12月\"><a class=\"anchor\" href=\"#10月-12月\">#</a> 10 月 - 12 月</h5>\n<p>《张宇考研数学真题大全解》+ 真题精讲视频</p>\n<p>《张宇八套卷》+ 重要题目讲解视频</p>\n<h3 id=\"英语-2\"><a class=\"anchor\" href=\"#英语-2\">#</a> 英语</h3>\n<h4 id=\"1基础阶段-2\"><a class=\"anchor\" href=\"#1基础阶段-2\">#</a> 1. 基础阶段</h4>\n<h5 id=\"1月-2月\"><a class=\"anchor\" href=\"#1月-2月\">#</a> 1 月 - 2 月</h5>\n<p>单词：集中背单词，以后每天循环背</p>\n<h5 id=\"3月-5月\"><a class=\"anchor\" href=\"#3月-5月\">#</a> 3 月 - 5 月</h5>\n<p>单词：每天循环背</p>\n<p>长难句：考研核心语法视频</p>\n<p>阅读：唐迟《考研英语阅读的逻辑》+ 阅读逻辑视频</p>\n<p>写作：王江涛《考研英语高分写作》+ 写作带背营视频 + 写作基础视频</p>\n<h4 id=\"2强化阶段-2\"><a class=\"anchor\" href=\"#2强化阶段-2\">#</a> 2. 强化阶段</h4>\n<h5 id=\"7月-10月\"><a class=\"anchor\" href=\"#7月-10月\">#</a> 7 月 - 10 月</h5>\n<p>单词：每天循环背</p>\n<p>真题：《张剑黄皮书历年考研》+ 阅读强化提升班视频</p>\n<h4 id=\"3冲刺阶段-2\"><a class=\"anchor\" href=\"#3冲刺阶段-2\">#</a> 3. 冲刺阶段</h4>\n<h5 id=\"11月-12月\"><a class=\"anchor\" href=\"#11月-12月\">#</a> 11 月 - 12 月</h5>\n<p>单词：每天循环背</p>\n<p>真题：隔一天做一次模拟考</p>\n<p>作文：背作文</p>\n<p>准备新题型、翻译、完型填空。</p>\n<h3 id=\"政治-2\"><a class=\"anchor\" href=\"#政治-2\">#</a> 政治</h3>\n<h4 id=\"1基础阶段-3\"><a class=\"anchor\" href=\"#1基础阶段-3\">#</a> 1. 基础阶段</h4>\n<h5 id=\"8月-9月\"><a class=\"anchor\" href=\"#8月-9月\">#</a> 8 月 - 9 月</h5>\n<p>视频：徐涛《核心考案》+ 强化班视频</p>\n<p>选择题：肖秀荣《1000 题》、肖秀荣《知识点精讲精练》</p>\n<h4 id=\"2强化阶段-3\"><a class=\"anchor\" href=\"#2强化阶段-3\">#</a> 2. 强化阶段</h4>\n<h5 id=\"10月-11月\"><a class=\"anchor\" href=\"#10月-11月\">#</a> 10 月 - 11 月</h5>\n<p>选择题：二刷肖秀荣《1000 题》</p>\n<p>模拟题：肖秀荣《命题冲刺 8 套卷》，背大题</p>\n<h4 id=\"3冲刺阶段-3\"><a class=\"anchor\" href=\"#3冲刺阶段-3\">#</a> 3. 冲刺阶段</h4>\n<h5 id=\"12月\"><a class=\"anchor\" href=\"#12月\">#</a> 12 月</h5>\n<p>模拟题：肖秀荣《命题终极预测 4 套卷》，<strong>肖 4 最重要，大题都要背</strong>，每年肖四都能押中好几道简答题，非常良心，无数经验推荐，考前必背。</p>\n<h3 id=\"专业课408-2\"><a class=\"anchor\" href=\"#专业课408-2\">#</a> 专业课 408</h3>\n<h4 id=\"1基础阶段-4\"><a class=\"anchor\" href=\"#1基础阶段-4\">#</a> 1. 基础阶段</h4>\n<h5 id=\"1月\"><a class=\"anchor\" href=\"#1月\">#</a> 1 月</h5>\n<p>数据结构：天勤《数据结构》+ 强化视频、《王道数据结构》选择题</p>\n<h5 id=\"2月-3月15\"><a class=\"anchor\" href=\"#2月-3月15\">#</a> 2 月 - 3 月 15</h5>\n<p>《算法笔记》+PAT 甲级考试</p>\n<h5 id=\"3月\"><a class=\"anchor\" href=\"#3月\">#</a> 3 月</h5>\n<p>《王道计组》选择题 + 强化视频</p>\n<h5 id=\"4月-2\"><a class=\"anchor\" href=\"#4月-2\">#</a> 4 月</h5>\n<p>《王道计网》选择题 + 强化视频</p>\n<h5 id=\"5月-2\"><a class=\"anchor\" href=\"#5月-2\">#</a> 5 月</h5>\n<p>《王道操作系统》选择题 + 强化视频</p>\n<h4 id=\"2强化阶段-4\"><a class=\"anchor\" href=\"#2强化阶段-4\">#</a> 2. 强化阶段</h4>\n<h5 id=\"7月-8月\"><a class=\"anchor\" href=\"#7月-8月\">#</a> 7 月 - 8 月</h5>\n<p>二刷《王道数据结构》、《王道计组》、《王道计网》、《王道操作系统》选择题和大题</p>\n<p>全面复习知识点及第一轮复习遗留下来的难点</p>\n<h5 id=\"9月\"><a class=\"anchor\" href=\"#9月\">#</a> 9 月</h5>\n<p>参照天勤《数据结构》、《计组》、《计网》、《操作系统》整理出一份自己的重要知识点汇总及易混知识点对比，快速的把天勤复习全书上的题刷完。</p>\n<h4 id=\"3冲刺阶段-4\"><a class=\"anchor\" href=\"#3冲刺阶段-4\">#</a> 3. 冲刺阶段</h4>\n<h5 id=\"10月-11月-2\"><a class=\"anchor\" href=\"#10月-11月-2\">#</a> 10 月 - 11 月</h5>\n<p>王道《历年真题解析》+ 历年真题视频</p>\n<p>重刷王道错题</p>\n<h5 id=\"12月-2\"><a class=\"anchor\" href=\"#12月-2\">#</a> 12 月</h5>\n<p>王道《模拟题》+ 模拟题视频</p>\n",
            "tags": [
                "考研",
                "考研资料",
                "考研规划"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/13/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/Macbookpro%E6%81%A2%E5%A4%8D%E5%A4%B1%E7%81%B5%E7%9A%84Type-c%E6%8E%A5%E5%8F%A3/",
            "url": "https://zengshengli775.gitee.io/2021/08/13/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/Macbookpro%E6%81%A2%E5%A4%8D%E5%A4%B1%E7%81%B5%E7%9A%84Type-c%E6%8E%A5%E5%8F%A3/",
            "title": "Macbookpro恢复失灵的Type-c接口",
            "date_published": "2021-08-12T16:00:00.000Z",
            "content_html": "<p>最近 Macbook Pro 的一个 Type-c 接口失灵了，从网上找到一个方法解决了。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1. 关机</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>2. 按下键盘右侧的 Shift 键，左侧的 Control 和 Option 键不放。此时电脑会开机，等进入显示白 \t 条的状态，不要松开手，同时按下电源按钮 10 秒钟。此时电脑将关闭。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>3. 松开所有按键</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>4. 等待 10 秒钟，重新启动电脑</pre></td></tr></table></figure><p>只试过用 <code>右侧的Shift+Control+Option</code> ，没有试过用 <code>左侧的Shift+Control+Option</code> ，据说不能成功</p>\n",
            "tags": [
                "实用技巧",
                "Mac"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/12/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "url": "https://zengshengli775.gitee.io/2021/08/12/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "title": "Python基础知识",
            "date_published": "2021-08-11T16:00:00.000Z",
            "content_html": "<h2 id=\"标识符\"><a class=\"anchor\" href=\"#标识符\">#</a> 标识符</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>字母、下划线、数字</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>区分大小写</pre></td></tr></table></figure><h2 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre>string<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 首字母大写</pre></td></tr><tr class=\"marked\"><td data-num=\"3\"></td><td><pre><span class=\"token string\">\"srring1\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"string2\"</span> 字符串拼接</pre></td></tr><tr class=\"marked\"><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\tPython\"</span><span class=\"token punctuation\">)</span> \\t为Table键</pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\\nPython\"</span><span class=\"token punctuation\">)</span> \\n为换行符</pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span>为以<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>为间隔</pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre>string<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 删除字符串两边的空白</pre></td></tr><tr class=\"marked\"><td data-num=\"8\"></td><td><pre><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"9\"></td><td><pre>\t<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"10\"></td><td><pre>\tseq <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 字符串序列</span></pre></td></tr><tr class=\"marked\"><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">print</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span> seq <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"12\"></td><td><pre>\t以上实例输出结果如下：</pre></td></tr><tr class=\"marked\"><td data-num=\"13\"></td><td><pre>\ta<span class=\"token operator\">-</span>b<span class=\"token operator\">-</span>c</pre></td></tr><tr class=\"marked\"><td data-num=\"14\"></td><td><pre>string<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;0:.2f&#125; &#123;1:.2f&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"16\"></td><td><pre>\t<span class=\"token number\">0</span>和<span class=\"token number\">1</span>表示<span class=\"token builtin\">format</span>函数中第一个和第二个参数</pre></td></tr><tr class=\"marked\"><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token number\">2f</span>表示小数部分保留两位</pre></td></tr></table></figure><h2 id=\"数字\"><a class=\"anchor\" href=\"#数字\">#</a> 数字</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;:.2f&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> 输出y为两位小数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span>gap<span class=\"token punctuation\">)</span> 生成随机数，从start开始，end结束，以gap为间隔</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lower<span class=\"token punctuation\">,</span>upper <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 输入多个值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>math<span class=\"token punctuation\">.</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> x的y次方</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> x的平方根</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pi 圆周率</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>e 自然常数</pre></td></tr></table></figure><h2 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>序列从<span class=\"token number\">0</span>开始</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 将元素添加到列表末尾</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>索引，值<span class=\"token punctuation\">)</span> 将元素添加到列表任意位置</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">del</span> string<span class=\"token punctuation\">[</span>索引<span class=\"token punctuation\">]</span> 删除列表中元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>索引<span class=\"token punctuation\">)</span> 删除列表元素（默认是末尾）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6\"</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> 列表推导式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>值<span class=\"token punctuation\">)</span> 删除列表值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 列表永久排序 reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span>为与字母顺序相反的顺序排序</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 列表临时排序</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 反转列表顺序</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 确定列表长度</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Test2<span class=\"token operator\">=</span>Test1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> 复制列表</pre></td></tr></table></figure><h2 id=\"元组\"><a class=\"anchor\" href=\"#元组\">#</a> 元组</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tup<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Google<span class=\"token string\">', '</span>Runoo<span class=\"token string\">b', '</span>Taobao<span class=\"token string\">', '</span>Wiki<span class=\"token string\">', '</span>Weibo<span class=\"token string\">','</span>Weixin'<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">del</span> tup 删除元组</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tup3 <span class=\"token operator\">=</span> tup1 <span class=\"token operator\">+</span> tup2 元组不能修改、删除元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>tup<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 创建集合</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">&#125;</span> 集合是无序的</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span> 添加元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span> 移除元素</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s<span class=\"token punctuation\">.</span>discard<span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span> 移除集合中的元素，且如果元素不存在，不会发生错误</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 随机删除集合中的一个元素</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> 计算集合 s 元素个数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>s<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 清空集合</pre></td></tr></table></figure><h2 id=\"字典\"><a class=\"anchor\" href=\"#字典\">#</a> 字典</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">dict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Runoob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'First'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> 访问字典里的值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Age'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span> 修改字典</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">del</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">]</span> 删除键 <span class=\"token string\">'Name'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 清空字典</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">del</span> <span class=\"token builtin\">dict</span> 删除字典</pre></td></tr></table></figure><h2 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>迭代器有两个基本的方法：<span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 和 <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> it <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 创建迭代器对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 输出迭代器的下一个元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>把一个类作为一个迭代器使用需要在类中实现两个方法 __iter__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 与 __next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyNumbers</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> self</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>a <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tx <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>a</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tself<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">raise</span> StopIteration <span class=\"token comment\">#StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况\t</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>myclass <span class=\"token operator\">=</span> MyNumbers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>myiter <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>myclass<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> myiter<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<h2 id=\"生成器\"><a class=\"anchor\" href=\"#生成器\">#</a> 生成器</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在 Python 中，使用了 <span class=\"token keyword\">yield</span> 的函数被称为生成器（generator）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>使用 <span class=\"token keyword\">yield</span> 实现斐波那契数列</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 生成器函数 - 斐波那契</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\ta<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">yield</span> a</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\ta<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tcounter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>f <span class=\"token operator\">=</span> fibonacci<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># f 是一个迭代器，由生成器返回生成</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tsys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python 使用 <span class=\"token keyword\">lambda</span> 来创建匿名函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 可写函数说明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">:</span> arg1 <span class=\"token operator\">+</span> arg2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 调用 sum 函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"相加后的值为 : \"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"相加后的值为 : \"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>不定长参数 <span class=\"token operator\">*</span></pre></td></tr></table></figure><h2 id=\"文件\"><a class=\"anchor\" href=\"#文件\">#</a> 文件</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token operator\">=</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Python.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"rt\"</span><span class=\"token punctuation\">)</span> 以文本方式打开文件<span class=\"token punctuation\">(</span>第一个字母r表示操作，第二个字母t表示文件类型<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 关闭文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 读取整行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> 将字符串写入文件，返回的是写入的字符长度</pre></td></tr></table></figure><h2 id=\"模块\"><a class=\"anchor\" href=\"#模块\">#</a> 模块</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">##plotly 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 创建 data frame</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>df <span class=\"token operator\">=</span> timesData<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># import graph objects as \"go\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> plotly<span class=\"token punctuation\">.</span>graph_objs <span class=\"token keyword\">as</span> go</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 设置第一条折线 trace1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># go.Scatter 可以创建一个散点图或者折线图的对象，我们将其命名为 trace1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>trace1 <span class=\"token operator\">=</span> go<span class=\"token punctuation\">.</span>Scatter<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    x <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>world_rank<span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 定义坐标轴的映射关系，将 world_rank 这一列作为 x 轴</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    y <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>citations<span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 同理，将 citations 这一列作为 y 轴</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    mode <span class=\"token operator\">=</span> <span class=\"token string\">\"lines\"</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 我们要绘制折线图，所以将 mode 设置为 “lines”</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    name <span class=\"token operator\">=</span> <span class=\"token string\">\"citations\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 将这条折线命名为 citations</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    marker <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'rgba(16, 112, 2, 0.8)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token comment\"># maker 用来定义点的性质，如颜色、大小等</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    text<span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>university_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token comment\"># 将 university_name 一列设置为悬停文本（鼠标悬停在图片上方显示的内容）</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 设置第二条折线 trace2</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>trace2 <span class=\"token operator\">=</span> go<span class=\"token punctuation\">.</span>Scatter<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    x <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>world_rank<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    y <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>teaching<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    mode <span class=\"token operator\">=</span> <span class=\"token string\">\"lines+markers\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">#绘制的折线图由散点连接而成，即 lines+markers</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    name <span class=\"token operator\">=</span> <span class=\"token string\">\"teaching\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    marker <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'rgba(80, 26, 80, 0.8)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    text<span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>university_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>trace1<span class=\"token punctuation\">,</span> trace2<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 添加图层 layout</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>layout <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>title <span class=\"token operator\">=</span> <span class=\"token string\">'Citation and Teaching vs World Rank of Top 100 Universities'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              <span class=\"token comment\"># 设置图像的标题</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>              xaxis<span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span> <span class=\"token string\">'World Rank'</span><span class=\"token punctuation\">,</span>ticklen<span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>zeroline<span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>              <span class=\"token comment\"># 设置 x 轴名称，x 轴刻度线的长度，不显示零线</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>             <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># 将 data 与 layout 组合为一个图像</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>fig <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">,</span> layout <span class=\"token operator\">=</span> layout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># 绘制图像</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>iplot<span class=\"token punctuation\">(</span>fig<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<h2 id=\"类和对象\"><a class=\"anchor\" href=\"#类和对象\">#</a> 类和对象</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#创建类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token string\">'类的帮助信息'</span>   <span class=\"token comment\">#类文档字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   class_suite  <span class=\"token comment\">#类体，class_suite 由类成员，方法，数据属性组成。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#创建实例对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token string\">'所有员工的基类'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   empCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#构造方法，用于创建对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token comment\">#定义成员变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      self<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      Employee<span class=\"token punctuation\">.</span>empCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">def</span> <span class=\"token function\">displayCount</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token keyword\">print</span> <span class=\"token string\">\"Total Employee %d\"</span> <span class=\"token operator\">%</span> Employee<span class=\"token punctuation\">.</span>empCount</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">def</span> <span class=\"token function\">displayEmployee</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">print</span> <span class=\"token string\">\"Name : \"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>  <span class=\"token string\">\", Salary: \"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>salary</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token string\">\"创建 Employee 类的第一个对象\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>emp1 <span class=\"token operator\">=</span> Employee<span class=\"token punctuation\">(</span><span class=\"token string\">\"Zara\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token string\">\"创建 Employee 类的第二个对象\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>emp2 <span class=\"token operator\">=</span> Employee<span class=\"token punctuation\">(</span><span class=\"token string\">\"Manni\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>emp1<span class=\"token punctuation\">.</span>displayEmployee<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>emp2<span class=\"token punctuation\">.</span>displayEmployee<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">\"Total Employee %d\"</span> <span class=\"token operator\">%</span> Employee<span class=\"token punctuation\">.</span>empCount</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#访问属性</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">## 您可以使用点号。来访问对象的属性 对象名。成员名</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>emp1<span class=\"token punctuation\">.</span>displayEmployee<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>emp2<span class=\"token punctuation\">.</span>displayEmployee<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">\"Total Employee %d\"</span> <span class=\"token operator\">%</span> Employee<span class=\"token punctuation\">.</span>empCount</pre></td></tr></table></figure>",
            "tags": [
                "编程基础",
                "Python"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/11/%E5%8D%9A%E5%AE%A2/%E8%BD%AC%E8%BD%BD%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%B3%95/",
            "url": "https://zengshengli775.gitee.io/2021/08/11/%E5%8D%9A%E5%AE%A2/%E8%BD%AC%E8%BD%BD%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%B3%95/",
            "title": "转载博客方法",
            "date_published": "2021-08-11T08:42:01.000Z",
            "content_html": "<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<p>利用 Markdown 能够解析 html 的特色（csdn 编辑模式里能够修改，文章里也有），咱们只要在开发者模式中，将须要转载的人的博客地址的文章部分的 div 块整个复制下来就好了。</p>\n<h2 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h2>\n<p>1. <code>option+command+I</code>  打开浏览器开发者模式</p>\n<p>2. 在 Elements 中浏览相应的 html 结构，找到例如 <code>&lt;div class=&quot;container&quot;&gt;</code>  或者  <code>&lt;div class = &quot;article_content&quot;&gt;</code>  的 div 块</p>\n<p>3. 右键单击这个 div 块，而后选择 <code>Copy-&gt;copy element</code> ，就可以将这个块内的元素所有提取下来啦。</p>\n<p>4. 接下来的事情就是转回本身的博客，使用 markdown 编辑器，将元素复制进来，然后导出。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29sLmx1L21hcmtkb3duLw==\">html 转 markdown</span></p>\n",
            "tags": [
                "博客",
                "博客",
                "Markdown"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/11/%E5%AF%BC%E8%88%AA/%E5%AF%BC%E8%88%AA/",
            "url": "https://zengshengli775.gitee.io/2021/08/11/%E5%AF%BC%E8%88%AA/%E5%AF%BC%E8%88%AA/",
            "title": "导航",
            "date_published": "2021-08-11T07:52:30.000Z",
            "content_html": "<h2 id=\"导航\"><a class=\"anchor\" href=\"#导航\">#</a> 导航</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5naXRuYXZpLmNvbS8=\">judasn 专属导航 - GitNavi - Sharing All The World</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hZHpocC5jbi8=\">爱达杂货铺 | 收集那些有用的东西 | 爱达导航</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhhbnNvdXNvdS5jb20vbWluaQ==\">让导航更简洁一点 - 站搜搜</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2lseGRoLmNvbS9jYXQvMTcz\">龙轩导航 - 做个有用的导航</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaXRlLnNjaXBpbmcuY29tLw==\">科塔学术导航 - 最专业、准确、及时和全面的科研与学术资源导航平台</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueHVlOG5hdi5jb20v\">学吧导航 | 四十万学习爱好者都在用的学习导航网站</span></p>\n",
            "tags": [
                "导航",
                "导航"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/11/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/",
            "url": "https://zengshengli775.gitee.io/2021/08/11/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/",
            "title": "编程学习资料",
            "date_published": "2021-08-11T07:11:15.000Z",
            "content_html": "<h2 id=\"markdown\"><a class=\"anchor\" href=\"#markdown\">#</a> Markdown</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9tYXJrZG93bi9tZC10dXRvcmlhbC5odG1s\">菜鸟教程 - Markdown 教程</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29sLmx1Lw==\">在线工具牌在线工具</span></p>\n<h2 id=\"编程练习\"><a class=\"anchor\" href=\"#编程练习\">#</a> 编程练习</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXNldC9hbGwvP2RpZmZpY3VsdHk9JUU3JUFFJTgwJUU1JThEJTk1\">「简单」题目合集 - 力扣（LeetCode）</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9waW50aWEuY24vcHJvYmxlbS1zZXRzP3RhYj0w\">PAT</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lZGFiaXQuY29tL2NoYWxsZW5nZXM=\">10,000+ Coding Practice Challenges // Edabit</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92aXN1YWxnby5uZXQvZW4=\">VisuAlgo - 通过动画可视化数据结构和算法</span></p>\n<h2 id=\"matlab\"><a class=\"anchor\" href=\"#matlab\">#</a> Matlab</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25jZXB1X2NoZW4vY2F0ZWdvcnlfODk2MzMzNi5odG1s\">MATLAB 学习笔记_ncepu_Chen 的博客 - CSDN 博客</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JzanNvc29zb3NvL2NhdGVnb3J5Xzk3MzI0NjIuaHRtbA==\">MATLAB_bsjsosososo 的博客_这么大个圈圈 - CSDN 博客</span></p>\n<h2 id=\"算法\"><a class=\"anchor\" href=\"#算法\">#</a> 算法</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM0ODY0MTQvYXJ0aWNsZS9kZXRhaWxzLzEwMjk2MTE3MQ==\">刷了几千道算法题，这些我私藏的刷题网站都在这里了！_Rocky0429-CSDN 博客_算法刷题网站</span></p>\n",
            "tags": [
                "编程基础",
                "编程工具",
                "编程学习资料"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/11/%E6%9C%9F%E6%9C%AB/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/",
            "url": "https://zengshengli775.gitee.io/2021/08/11/%E6%9C%9F%E6%9C%AB/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/",
            "title": "期末复习资料",
            "date_published": "2021-08-11T06:55:17.000Z",
            "content_html": "<h2 id=\"期末复习资料\"><a class=\"anchor\" href=\"#期末复习资料\">#</a> 期末复习资料</h2>\n<h3 id=\"数据结构\"><a class=\"anchor\" href=\"#数据结构\">#</a> 数据结构</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zMDgxNDMyOS9hcnRpY2xlL2RldGFpbHMvOTQ5MzQ5MDM/Yml6X2lkPTEwMiZhbXA7dXRtX3Rlcm09JUU2JTk1JUIwJUU2JThEJUFFJUU3JUJCJTkzJUU2JTlFJTg0YyVFOCVBRiVBRCVFOCVBOCU4MCVFNyU4OSU4OCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5ibG9nfnNvYmFpZHV3ZWJ+ZGVmYXVsdC0xLTk0OTM0OTAzJmFtcDtzcG09MTAxOC4yMTE4LjMwMDEuNDE4Nw==\">数据结构（c 语言版）代码_weixin_30814329 的博客 - CSDN 博客</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTIzMDk2L2FydGljbGUvZGV0YWlscy84NjU2MDU3MD9vcHNfcmVxdWVzdF9taXNjPSUyNTdCJTI1MjJyZXF1ZXN0JTI1NUZpZCUyNTIyJTI1M0ElMjUyMjE2MDA2ODkwMjAxOTcyNTIyMjQ1NTAwNyUyNTIyJTI1MkMlMjUyMnNjbSUyNTIyJTI1M0ElMjUyMjIwMTQwNzEzLjEzMDEwMjMzNC4uJTI1MjIlMjU3RCZhbXA7cmVxdWVzdF9pZD0xNjAwNjg5MDIwMTk3MjUyMjI0NTUwMDcmYW1wO2Jpel9pZD0wJmFtcDt1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfc2VhcmNoX3Jlc3VsdC5ub25lLXRhc2stYmxvZy0yfmJsb2d+Zmlyc3RfcmFua192MX5yYW5rX2Jsb2dfdjEtMi04NjU2MDU3MC5wY192MV9yYW5rX2Jsb2dfdjEmYW1wO3V0bV90ZXJtPSVFNiU5NSVCMCVFNiU4RCVBRSVFNyVCQiU5MyVFNiU5RSU4NGMlRTglQUYlQUQlRTglQTglODAlRTclODklODgmYW1wO3NwbT0xMDE4LjIxMTguMzAwMS40MTg3\">《数据结构》C 语言版 (清华严蔚敏考研版） 全书知识梳理_22 26 25 的博客 - CSDN 博客</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R5dXN0bGkvY2F0ZWdvcnlfODU4MzcxMi5odG1s\">数据结构_tyustli 的博客 - CSDN 博客</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2dpczRnLnBrdS5lZHUuY24vY291cnNlL3B5dGhvbmRzLyMlRTglQUYlQkUlRTclQTglOEIlRTYlOTUlOTklRTYlOUQlOTA=\">数据结构与算法 2020 春季 – 北京大学新一代 GIS 研究室</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdTE3MjM0MDUwL2FydGljbGUvZGV0YWlscy8xMDY3NDcwNDAjJUU2JUIzJUE4JUU2JTg0JThGMjYlRUYlQkMlOUElRTUlOTMlODglRTUlQTQlQUIlRTYlOUIlQkMlRTUlQjglQTYlRTYlOUQlODMlRTglQjclQUYlRTUlQkUlODQlRTklOTUlQkYlRTUlQkElQTY=\">数据结构 ——【十五套卷子】考前题型归纳整理_雨花石流星雨的博客 - CSDN 博客</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2thbmdqaWFud2VpL0RhdGEtU3RydWN0dXJl\">《数据结构》- 严蔚敏。吴伟民 - 教材源码与习题解析</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2FuZ2ppYW53ZWkxMDEvcC81MjIxODE2Lmh0bWw=\">《数据结构 - C 语言版》（严蔚敏，吴伟民版）课本源码 + 习题集解析使用说明 - 康建伟 - 博客园</span></p>\n<h3 id=\"统计计算\"><a class=\"anchor\" href=\"#统计计算\">#</a> 统计计算</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NtaXJrQ2FvL0xpaGFuZw==\">统计学习方法</span></p>\n<h3 id=\"期末速成视频\"><a class=\"anchor\" href=\"#期末速成视频\">#</a> 期末速成视频</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVjaGZlbnMuY29tL3Bvc3RzL2J1Z3Vha2UuaHRtbA==\">【高数叔 + 猴博士 + 高斯课堂 + 斐多课堂】大学不挂科速成课全系列视频 | TechFen's Blog</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueHVlZGJsLmNvbS9kYXh1ZWtlY2hlbmcvcWltb3N1Y2hlbmdrZQ==\">期末复习速成课 - 学道部落</span></p>\n<h3 id=\"数字信号处理\"><a class=\"anchor\" href=\"#数字信号处理\">#</a> 数字信号处理</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcHBncWUyeDhwODU0MzUuaDUueGlhb2Vrbm93LmNvbS92MS9nb29kcy9nb29kc19kZXRhaWwvcF82MDkxMWVjMGU0YjA5ODkwZjBlOTA0NjE/dHlwZT0z\">4 小时从零基础学完数字信号处理【LYJ】</span></p>\n<h3 id=\"数据库\"><a class=\"anchor\" href=\"#数据库\">#</a> 数据库</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hjYmJ0L2FydGljbGUvZGV0YWlscy8xODE1OTkzMz9vcHNfcmVxdWVzdF9taXNjPSUyNTdCJTI1MjJyZXF1ZXN0JTI1NUZpZCUyNTIyJTI1M0ElMjUyMjE2MjIxMDM2MzAxNjc4MDI2NDA5MDk3NiUyNTIyJTI1MkMlMjUyMnNjbSUyNTIyJTI1M0ElMjUyMjIwMTQwNzEzLjEzMDEwMjMzNC4uJTI1MjIlMjU3RCZhbXA7cmVxdWVzdF9pZD0xNjIyMTAzNjMwMTY3ODAyNjQwOTA5NzYmYW1wO2Jpel9pZD0wJmFtcDt1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfc2VhcmNoX3Jlc3VsdC5ub25lLXRhc2stYmxvZy0yfmFsbH5zb2JhaWR1ZW5kfmRlZmF1bHQtMS0xODE1OTkzMy5maXJzdF9yYW5rX3YyX3BjX3JhbmtfdjI5JmFtcDt1dG1fdGVybT0lRTYlOTUlQjAlRTYlOEQlQUUlRTUlQkElOTMlRTclQjMlQkIlRTclQkIlOUYlRTYlQTYlODIlRTglQUUlQkElRTclQUMlOTQlRTglQUUlQjAmYW1wO3NwbT0xMDE4LjIyMjYuMzAwMS40MTg3\">《数据库系统概论》复习笔记_水果君の日常 - CSDN 博客_数据库系统概论笔记</span></p>\n<h3 id=\"四六级\"><a class=\"anchor\" href=\"#四六级\">#</a> 四六级</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4udXZvb2MuY29tL0xlYXJuL0NFVC9DRVQ2Lw==\">友沃可云 - 在线云文件</span></p>\n",
            "tags": [
                "期末",
                "期末复习"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/11/%E8%BD%AF%E4%BB%B6/%E8%BD%AF%E4%BB%B6%E7%BD%91%E7%AB%99%E6%B1%87%E6%80%BB/",
            "url": "https://zengshengli775.gitee.io/2021/08/11/%E8%BD%AF%E4%BB%B6/%E8%BD%AF%E4%BB%B6%E7%BD%91%E7%AB%99%E6%B1%87%E6%80%BB/",
            "title": "软件网站汇总",
            "date_published": "2021-08-11T04:28:34.000Z",
            "content_html": "<h2 id=\"软件网站汇总\"><a class=\"anchor\" href=\"#软件网站汇总\">#</a> 软件网站汇总</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3RpZmFsb2NraGFydC55czE2OC5jb20v\">Tifalockhart</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9heHV0b25neHVlLmNvbS8=\">阿虚同学的储物间</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYWMucXEuY29tLz9mcm9tPXBjcXE=\">腾讯 Mac 软件中心</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb29jMS5jaGFveGluZy5jb20venQvMjAxNzIzMzkzLmh0bWw=\">阿虚的 FQ 教程</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWFjd2suY29tLw==\">MacWk - 精品 mac 软件下载</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWFjYmwuY29tLw==\">马可菠萝 - 分享你喜欢的 MAC 应用</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGlnaXQ3Ny5jb20v\">Digit77.com | 海量精品 Mac 应用免费分享</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi8=\">吾爱破解 </span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly8za2xhLmNuLw==\">3 克拉</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3ljaXQueXMxNjguY29tLw==\">8791 的空间</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVubmluZ2NoZWVzZS5jb20v\">奔跑中的奶酪 - 有智，有趣，有爱</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3otc21zLmNvbS8=\">在线云短信网页版 - 免费接码平台【官网】</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhhb2ppYW9iZW4uY24v\">找脚本 —— 找任何你需要的脚本</span></p>\n",
            "tags": [
                "软件",
                "软件网站"
            ]
        },
        {
            "id": "https://zengshengli775.gitee.io/2021/08/11/%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E5%86%99%E6%96%87%E7%AB%A0/",
            "url": "https://zengshengli775.gitee.io/2021/08/11/%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E5%86%99%E6%96%87%E7%AB%A0/",
            "title": "Hexo博客写文章",
            "date_published": "2021-08-11T01:47:16.000Z",
            "content_html": "<h2 id=\"新建文档\"><a class=\"anchor\" href=\"#新建文档\">#</a> 新建文档</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd Hexo-Blog</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo n 文章标题</pre></td></tr></table></figure><h3 id=\"md文档可以设定文章资源文件夹功能\"><a class=\"anchor\" href=\"#md文档可以设定文章资源文件夹功能\">#</a> md 文档可以设定文章资源文件夹功能</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#使用文本编辑器打开站点根目录下的 _ config.yml 文件，将 post_asset_folder 值设置为 true。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>post_asset_folder: true</pre></td></tr></table></figure><h2 id=\"front-matter\"><a class=\"anchor\" href=\"#front-matter\">#</a> Front-matter</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>date: </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>categories:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>- </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>tags:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-</pre></td></tr></table></figure><h2 id=\"首页置顶文章\"><a class=\"anchor\" href=\"#首页置顶文章\">#</a> 首页置顶文章</h2>\n<p>在文章的 Front Matter 设置  <code>sticky: true</code>  ，则该文章将显示在首页最上方的 置顶文章 列。 多篇文章按照发布时间倒序排列，不分页。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 置顶文章</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sticky: true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr></table></figure><h2 id=\"生成文件并部署\"><a class=\"anchor\" href=\"#生成文件并部署\">#</a> 生成文件并部署</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo clean</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo g</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo d</pre></td></tr></table></figure><h2 id=\"遇到的困难\"><a class=\"anchor\" href=\"#遇到的困难\">#</a> 遇到的困难</h2>\n<h3 id=\"root权限问题\"><a class=\"anchor\" href=\"#root权限问题\">#</a> Root 权限问题</h3>\n<p>在第一次写文章的过程中遇到的最大困难是 root 权限问题，因为参考 b 站视频，用命令 sudo su 开启了 root 权限，导致用 Typora 软件不能编辑。</p>\n<p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbgy1gtd94b1inej31a217m4b5.jpg\" alt=\"1.png\" /></p>\n<p>还有就是 hexo d 时遇到各种报错，没找到解决方法，只能将 Github 仓库删除再重新建立，最终解决。</p>\n<h3 id=\"代码块问题\"><a class=\"anchor\" href=\"#代码块问题\">#</a> 代码块问题</h3>\n<p>按照主题作者的教程，把 highlight 的 enable 改成 false ，停用默认代码高亮功能，但是代码块的 mac 样式依旧不能正常显示，因此参考博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9zcGVjaWFsLw==\">Step.4 主题特殊功能 - Theme Shoka Documentation - 二进制杂谈 - 计算机科学 | Yume Shoka = 優萌初華 = 有夢書架</span>，找到了代码块的解决办法：一定要设定代码语言或者直接写 raw</p>\n<p>使用  <code>markdown-it-prism</code>  进行代码高亮，支持显示行号、行高亮  <code>mark</code>  、命令行提示符  <code>command</code>  、代码块标题。</p>\n<p>基本格式：  <code>[language] [title] [url] [link text] [mark] [command]</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">language</td>\n<td style=\"text-align:left\">支持的语言<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcmlzbWpzLmNvbS8jc3VwcG9ydGVkLWxhbmd1YWdlcw==\">戳此</span>如果不需要代码高亮，但希望显示代码块样式，则设为  <code>raw</code>  留空或设为  <code>info</code>  ，将不显示代码高亮和代码块样式</td>\n<td style=\"text-align:left\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">title</td>\n<td style=\"text-align:left\">代码块的标题文字</td>\n<td style=\"text-align:left\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">url</td>\n<td style=\"text-align:left\">代码块标题右侧显示的链接</td>\n<td style=\"text-align:left\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">link text</td>\n<td style=\"text-align:left\">上述链接显示的标题</td>\n<td style=\"text-align:left\">link</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mark</td>\n<td style=\"text-align:left\">行高亮显示，格式为  <code>mark:行号,行号开始-行号结束,其他行号</code>  。 例如  <code>mark:1,4-7,10</code>  ，将高亮显示第 1、4、5、6、7、10 行</td>\n<td style=\"text-align:left\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">command</td>\n<td style=\"text-align:left\">命令行提示符，格式为  <code>command:(&quot;提示内容&quot;:行号,行号||&quot;提示内容&quot;:行号开始-行号结束)</code>  例如  <code>command:(&quot;[root@localhost] $&quot;:1,9-10||&quot;[admin@remotehost] #&quot;:4-6)</code></td>\n<td style=\"text-align:left\">null</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例：</h4>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#96;&#96;&#96;java 行高亮 https:&#x2F;&#x2F;shoka.lostyu.me 参考链接 mark:1,6-7</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>import java.util.Scanner;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Scanner in &#x3D; new Scanner (System.in);</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#x2F;&#x2F; 输入 Scan 之后，按下键盘 Alt + “&#x2F;” 键，Eclipse 下自动补全。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System.out.println (in.nextLine ());</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System.out.println (&quot;Hello&quot; + &quot;world.&quot;);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&#96;&#96;&#96;bash 命令行提示符 command:(&quot;[root@localhost] $&quot;:1,9-10||&quot;[admin@remotehost] #&quot;:4-6)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pwd</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#x2F;usr&#x2F;home&#x2F;chris&#x2F;bin</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ls -la</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>total 2</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>drwxr-xr-x   2 chris  chris     11 Jan 10 16:48 .</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>drwxr--r-x  45 chris  chris     92 Feb 14 11:10 ..</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>-rwxr-xr-x   1 chris  chris    444 Aug 25  2013 backup</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>-rwxr-xr-x   1 chris  chris    642 Jan 17 14:42 deploy</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>git add -A</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>git commit -m &quot;update&quot;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>git push</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr></table></figure><h4 id=\"在博客上显示的结果\"><a class=\"anchor\" href=\"#在博客上显示的结果\">#</a> 在博客上显示的结果：</h4>\n<p><img data-src=\"http://ww1.sinaimg.cn/large/007QGucbgy1gtdc9rfca7j31e210idr6.jpg\" alt=\"2.png\" /></p>\n<h3 id=\"图片问题\"><a class=\"anchor\" href=\"#图片问题\">#</a> 图片问题</h3>\n<p>在本地写的 md 文件中有图片，在博客上显示不出来。</p>\n<p>参考博客：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYnpzaGVuZy9wLzEzODAyODI5Lmh0bWw=\">hexo 博客如何插入图片 - 不作声 - 博客园</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQzNDAxNDM2L2FydGljbGUvZGV0YWlscy8xMDcxOTE2ODg=\">hexo 博客中插入图片失败 —— 解决思路及个人最终解决办法_m0_43401436 的博客 - CSDN 博客</span></p>\n<h4 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案</h4>\n<h5 id=\"方案一\"><a class=\"anchor\" href=\"#方案一\">#</a> 方案一</h5>\n<p>写篇博客，在 <code>source\\_posts</code>  文件夹下新建 <code>xxx.md</code>  文件，写着写着需要插一张图，从别处复制，然后在 typora 中直接粘贴，图片资源自动储存在同名文件夹下。</p>\n<p>在 typora 中，图片会自动变为 <code>![](xxx /image.jpg)</code> , 使用 <code>&lt;Command-f&gt;</code>  快捷键，将 <code>xxx/</code>  全部替换为空即可删除，此时 md 中图片显示不出来，但是博客上可以显示。</p>\n<h5 id=\"方案二\"><a class=\"anchor\" href=\"#方案二\">#</a> 方案二</h5>\n<p>运用浏览器的 “微博图床” 插件，复制图片到插件中，生成 markdown 链接，将链接复制到文章中，md 文件中与博客上都可以显示。（微博图床以后可能更加严格限制外链，图片可能会失效）</p>\n<h3 id=\"博客搜索功能\"><a class=\"anchor\" href=\"#博客搜索功能\">#</a> 博客搜索功能</h3>\n<p>在 Hexo 根目录的_config.yml 中加入 algolia 的配置，注意改成前面 API Keys 页面相应配置。</p>\n<p>这里注意 apikey 填写刚才你创建的那个有权限的，其余的在 your api keys 里面可以找到</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>algolia:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  applicationID: &#39;your applicationID&#39;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  apiKey: &#39;your apiKey&#39;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  adminApiKey: &#39;your adminApiKey&#39;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  indexName: &#39;your indexName&#39;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  chunkSize: 5000</pre></td></tr></table></figure><p>上传数据到 algolia，下面 your apiKey 替换为刚才自己创建拥有权限的 api</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>export HEXO_ALGOLIA_INDEXING_KEY&#x3D;your apiKey</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo algolia</pre></td></tr></table></figure><h3 id=\"gitee-pages无法更新\"><a class=\"anchor\" href=\"#gitee-pages无法更新\">#</a> Gitee pages 无法更新</h3>\n<p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYzMzg4Mi9hcnRpY2xlL2RldGFpbHMvMTE1OTYxMzE4\">Gitee pages 无法更新_coasxu 的博客 - CSDN 博客</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly95ZXpoZWNoZW55YW5nLmdpdGVlLmlvLzIwMjAvMTAwNzE0OTgwLmh0bWw=\">【Hexo】Gitee Pages 服务自动更新 | 叶遮沉阳</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5MDY5NTA5L2FydGljbGUvZGV0YWlscy8xMDU0NDQ3NTU/b3BzX3JlcXVlc3RfbWlzYz0lMjU3QiUyNTIycmVxdWVzdCUyNTVGaWQlMjUyMiUyNTNBJTI1MjIxNjI4NzYxODQ2MTY3ODAyNTUyNTM2ODMlMjUyMiUyNTJDJTI1MjJzY20lMjUyMiUyNTNBJTI1MjIyMDE0MDcxMy4xMzAxMDIzMzQuLiUyNTIyJTI1N0QmYW1wO3JlcXVlc3RfaWQ9MTYyODc2MTg0NjE2NzgwMjU1MjUzNjgzJmFtcDtiaXpfaWQ9MCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+c29iYWlkdWVuZH5kZWZhdWx0LTEtMTA1NDQ0NzU1LmZpcnN0X3JhbmtfdjJfcGNfcmFua192MjkmYW1wO3V0bV90ZXJtPWhleG9HaXRlZSZhbXA7c3BtPTEwMTguMjIyNi4zMDAxLjQxODc=\">Hexo+Gitee 搭建个人博客_暮子凡的博客 - CSDN 博客</span></p>\n",
            "tags": [
                "博客",
                "Hexo",
                "博客",
                "Markdown"
            ]
        }
    ]
}